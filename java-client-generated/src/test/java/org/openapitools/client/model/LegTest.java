/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElevationPoint;
import org.openapitools.client.model.EncodedPolylineBean;
import org.openapitools.client.model.LegTimeZone;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.WalkStep;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Leg
 */
public class LegTest {
    private final Leg model = new Leg();

    /**
     * Model tests for Leg
     */
    @Test
    public void testLeg() {
        // TODO: test Leg
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    public void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'endTime'
     */
    @Test
    public void endTimeTest() {
        // TODO: test endTime
    }

    /**
     * Test the property 'departureDelay'
     */
    @Test
    public void departureDelayTest() {
        // TODO: test departureDelay
    }

    /**
     * Test the property 'arrivalDelay'
     */
    @Test
    public void arrivalDelayTest() {
        // TODO: test arrivalDelay
    }

    /**
     * Test the property 'realTime'
     */
    @Test
    public void realTimeTest() {
        // TODO: test realTime
    }

    /**
     * Test the property 'distance'
     */
    @Test
    public void distanceTest() {
        // TODO: test distance
    }

    /**
     * Test the property 'pathway'
     */
    @Test
    public void pathwayTest() {
        // TODO: test pathway
    }

    /**
     * Test the property 'mode'
     */
    @Test
    public void modeTest() {
        // TODO: test mode
    }

    /**
     * Test the property 'agencyName'
     */
    @Test
    public void agencyNameTest() {
        // TODO: test agencyName
    }

    /**
     * Test the property 'agencyUrl'
     */
    @Test
    public void agencyUrlTest() {
        // TODO: test agencyUrl
    }

    /**
     * Test the property 'agencyTimeZoneOffset'
     */
    @Test
    public void agencyTimeZoneOffsetTest() {
        // TODO: test agencyTimeZoneOffset
    }

    /**
     * Test the property 'routeColor'
     */
    @Test
    public void routeColorTest() {
        // TODO: test routeColor
    }

    /**
     * Test the property 'routeId'
     */
    @Test
    public void routeIdTest() {
        // TODO: test routeId
    }

    /**
     * Test the property 'routeTextColor'
     */
    @Test
    public void routeTextColorTest() {
        // TODO: test routeTextColor
    }

    /**
     * Test the property 'interlineWithPreviousLeg'
     */
    @Test
    public void interlineWithPreviousLegTest() {
        // TODO: test interlineWithPreviousLeg
    }

    /**
     * Test the property 'tripBlockId'
     */
    @Test
    public void tripBlockIdTest() {
        // TODO: test tripBlockId
    }

    /**
     * Test the property 'headsign'
     */
    @Test
    public void headsignTest() {
        // TODO: test headsign
    }

    /**
     * Test the property 'agencyId'
     */
    @Test
    public void agencyIdTest() {
        // TODO: test agencyId
    }

    /**
     * Test the property 'tripId'
     */
    @Test
    public void tripIdTest() {
        // TODO: test tripId
    }

    /**
     * Test the property 'serviceDate'
     */
    @Test
    public void serviceDateTest() {
        // TODO: test serviceDate
    }

    /**
     * Test the property 'from'
     */
    @Test
    public void fromTest() {
        // TODO: test from
    }

    /**
     * Test the property 'to'
     */
    @Test
    public void toTest() {
        // TODO: test to
    }

    /**
     * Test the property 'legGeometry'
     */
    @Test
    public void legGeometryTest() {
        // TODO: test legGeometry
    }

    /**
     * Test the property 'legElevation'
     */
    @Test
    public void legElevationTest() {
        // TODO: test legElevation
    }

    /**
     * Test the property 'alertIds'
     */
    @Test
    public void alertIdsTest() {
        // TODO: test alertIds
    }

    /**
     * Test the property 'routeShortName'
     */
    @Test
    public void routeShortNameTest() {
        // TODO: test routeShortName
    }

    /**
     * Test the property 'routeLongName'
     */
    @Test
    public void routeLongNameTest() {
        // TODO: test routeLongName
    }

    /**
     * Test the property 'boardRule'
     */
    @Test
    public void boardRuleTest() {
        // TODO: test boardRule
    }

    /**
     * Test the property 'alightRule'
     */
    @Test
    public void alightRuleTest() {
        // TODO: test alightRule
    }

    /**
     * Test the property 'rentedBike'
     */
    @Test
    public void rentedBikeTest() {
        // TODO: test rentedBike
    }

    /**
     * Test the property 'wait'
     */
    @Test
    public void waitTest() {
        // TODO: test wait
    }

    /**
     * Test the property 'routeIds'
     */
    @Test
    public void routeIdsTest() {
        // TODO: test routeIds
    }

    /**
     * Test the property 'tripIds'
     */
    @Test
    public void tripIdsTest() {
        // TODO: test tripIds
    }

    /**
     * Test the property 'hasAlertInPattern'
     */
    @Test
    public void hasAlertInPatternTest() {
        // TODO: test hasAlertInPattern
    }

    /**
     * Test the property 'generalizedCost'
     */
    @Test
    public void generalizedCostTest() {
        // TODO: test generalizedCost
    }

    /**
     * Test the property 'requiresBooking'
     */
    @Test
    public void requiresBookingTest() {
        // TODO: test requiresBooking
    }

    /**
     * Test the property 'onBoardAccess'
     */
    @Test
    public void onBoardAccessTest() {
        // TODO: test onBoardAccess
    }

    /**
     * Test the property 'vertex'
     */
    @Test
    public void vertexTest() {
        // TODO: test vertex
    }

    /**
     * Test the property 'duration'
     */
    @Test
    public void durationTest() {
        // TODO: test duration
    }

    /**
     * Test the property 'timeZone'
     */
    @Test
    public void timeZoneTest() {
        // TODO: test timeZone
    }

    /**
     * Test the property 'transitLeg'
     */
    @Test
    public void transitLegTest() {
        // TODO: test transitLeg
    }

    /**
     * Test the property 'intermediateStops'
     */
    @Test
    public void intermediateStopsTest() {
        // TODO: test intermediateStops
    }

    /**
     * Test the property 'steps'
     */
    @Test
    public void stepsTest() {
        // TODO: test steps
    }

}
