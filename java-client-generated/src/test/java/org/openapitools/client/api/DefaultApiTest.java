/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlertSearchMethodResponse;
import org.openapitools.client.model.ApiVersion;
import org.openapitools.client.model.ArrivalsAndDeparturesForLocationOTPMethodResponse;
import org.openapitools.client.model.ArrivalsAndDeparturesForStopOTPMethodResponse;
import org.openapitools.client.model.BicycleRentalMethodResponse;
import org.openapitools.client.model.Dialect;
import org.openapitools.client.model.MetadataResponse;
import org.openapitools.client.model.MultiRouteDetailsMethodResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OnboardDepartPosition;
import org.openapitools.client.model.OnboardDepartSearchMethodResponse;
import org.openapitools.client.model.PlanTripResponse;
import org.openapitools.client.model.ReferencesMethodResponse;
import org.openapitools.client.model.ReferencesSchema;
import org.openapitools.client.model.RouteDetailsForStopMethodResponse;
import org.openapitools.client.model.RouteDetailsMethodResponse;
import org.openapitools.client.model.ScheduleForStopOTPMethodResponse;
import org.openapitools.client.model.SearchMethodResponse;
import org.openapitools.client.model.StatisticsResponse;
import org.openapitools.client.model.StopsForLocationResponse;
import org.openapitools.client.model.TicketingMethodResponse;
import org.openapitools.client.model.TraverseMode;
import org.openapitools.client.model.TripDetailsOTPMethodResponse;
import org.openapitools.client.model.VehicleForTripMethodResponse;
import org.openapitools.client.model.VehiclesForLocationMethodResponse;
import org.openapitools.client.model.VehiclesForRouteMethodResponse;
import org.openapitools.client.model.VehiclesForStopMethodResponse;
import org.openapitools.client.model.WalkProfile;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingRedirectTest() throws ApiException {
        Dialect dialect = null;
        String routeId = null;
        String directionId = null;
        String tripId = null;
        String serviceDate = null;
        String boardStopId = null;
        String alightStopId = null;
        ApiVersion version = null;
        String appVersion = null;
        api.bookingRedirect(dialect, routeId, directionId, tripId, serviceDate, boardStopId, alightStopId, version, appVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArrivalsAndDeparturesForLocationTest() throws ApiException {
        Dialect dialect = null;
        Integer groupLimit = null;
        Double clientLon = null;
        Double clientLat = null;
        Integer minutesBefore = null;
        Integer minutesAfter = null;
        List<String> stopId = null;
        List<String> includeRouteId = null;
        Long time = null;
        Boolean onlyDepartures = null;
        Integer limit = null;
        Float lat = null;
        Float lon = null;
        Float latSpan = null;
        Float lonSpan = null;
        Integer radius = null;
        String query = null;
        Integer minResult = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        ArrivalsAndDeparturesForLocationOTPMethodResponse response = api.getArrivalsAndDeparturesForLocation(dialect, groupLimit, clientLon, clientLat, minutesBefore, minutesAfter, stopId, includeRouteId, time, onlyDepartures, limit, lat, lon, latSpan, lonSpan, radius, query, minResult, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArrivalsAndDeparturesForStopTest() throws ApiException {
        Dialect dialect = null;
        Integer minutesBefore = null;
        Integer minutesAfter = null;
        List<String> stopId = null;
        List<String> includeRouteId = null;
        Long time = null;
        Boolean onlyDepartures = null;
        Integer limit = null;
        Float lat = null;
        Float lon = null;
        Float latSpan = null;
        Float lonSpan = null;
        Integer radius = null;
        String query = null;
        Integer minResult = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        ArrivalsAndDeparturesForStopOTPMethodResponse response = api.getArrivalsAndDeparturesForStop(dialect, minutesBefore, minutesAfter, stopId, includeRouteId, time, onlyDepartures, limit, lat, lon, latSpan, lonSpan, radius, query, minResult, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBicycleRentalStationsTest() throws ApiException {
        Dialect dialect = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        BicycleRentalMethodResponse response = api.getBicycleRentalStations(dialect, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetadataTest() throws ApiException {
        Dialect dialect = null;
        Long time = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        MetadataResponse response = api.getMetadata(dialect, time, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultiRouteDetailsTest() throws ApiException {
        List<String> routeId = null;
        Dialect dialect = null;
        String date = null;
        Boolean related = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        MultiRouteDetailsMethodResponse response = api.getMultiRouteDetails(routeId, dialect, date, related, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferencesTest() throws ApiException {
        Dialect dialect = null;
        List<String> agencyId = null;
        List<String> alertId = null;
        List<String> routeId = null;
        List<String> stopId = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        ReferencesMethodResponse response = api.getReferences(dialect, agencyId, alertId, routeId, stopId, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteDetailsTest() throws ApiException {
        String routeId = null;
        Dialect dialect = null;
        String date = null;
        Boolean related = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        RouteDetailsMethodResponse response = api.getRouteDetails(routeId, dialect, date, related, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteDetailsForStopTest() throws ApiException {
        Dialect dialect = null;
        String stopId = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        RouteDetailsForStopMethodResponse response = api.getRouteDetailsForStop(dialect, stopId, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScheduleForStopTest() throws ApiException {
        Dialect dialect = null;
        List<String> stopId = null;
        String date = null;
        Boolean onlyDepartures = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        ScheduleForStopOTPMethodResponse response = api.getScheduleForStop(dialect, stopId, date, onlyDepartures, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatisticsTest() throws ApiException {
        Dialect dialect = null;
        StatisticsResponse response = api.getStatistics(dialect);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStopsForLocationTest() throws ApiException {
        Dialect dialect = null;
        Float lat = null;
        Float lon = null;
        Float latSpan = null;
        Float lonSpan = null;
        Integer radius = null;
        String query = null;
        Integer minResult = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        StopsForLocationResponse response = api.getStopsForLocation(dialect, lat, lon, latSpan, lonSpan, radius, query, minResult, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTicketingDataTest() throws ApiException {
        Dialect dialect = null;
        Long ifModifiedSince = null;
        OffsetDateTime ifModifiedSince2 = null;
        Boolean full = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        TicketingMethodResponse response = api.getTicketingData(dialect, ifModifiedSince, ifModifiedSince2, full, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTripDetailsTest() throws ApiException {
        Dialect dialect = null;
        String vehicleId = null;
        String tripId = null;
        String date = null;
        Long ifModifiedSince = null;
        OffsetDateTime ifModifiedSince2 = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        TripDetailsOTPMethodResponse response = api.getTripDetails(dialect, vehicleId, tripId, date, ifModifiedSince, ifModifiedSince2, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVehicleForTripTest() throws ApiException {
        List<String> tripId = null;
        Dialect dialect = null;
        List<String> date = null;
        Long ifModifiedSince = null;
        OffsetDateTime ifModifiedSince2 = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        VehicleForTripMethodResponse response = api.getVehicleForTrip(tripId, dialect, date, ifModifiedSince, ifModifiedSince2, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVehiclesForLocationTest() throws ApiException {
        Dialect dialect = null;
        String query = null;
        Float lat = null;
        Float lon = null;
        Float latSpan = null;
        Float lonSpan = null;
        Integer radius = null;
        Long ifModifiedSince = null;
        OffsetDateTime ifModifiedSince2 = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        VehiclesForLocationMethodResponse response = api.getVehiclesForLocation(dialect, query, lat, lon, latSpan, lonSpan, radius, ifModifiedSince, ifModifiedSince2, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVehiclesForRouteTest() throws ApiException {
        List<String> routeId = null;
        Dialect dialect = null;
        Boolean related = null;
        Long ifModifiedSince = null;
        OffsetDateTime ifModifiedSince2 = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        VehiclesForRouteMethodResponse response = api.getVehiclesForRoute(routeId, dialect, related, ifModifiedSince, ifModifiedSince2, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVehiclesForStopTest() throws ApiException {
        String stopId = null;
        Dialect dialect = null;
        Long ifModifiedSince = null;
        OffsetDateTime ifModifiedSince2 = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        VehiclesForStopMethodResponse response = api.getVehiclesForStop(stopId, dialect, ifModifiedSince, ifModifiedSince2, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void planAccessTest() throws ApiException {
        Dialect dialect = null;
        String fromPlace = null;
        String toPlace = null;
        List<TraverseMode> mode = null;
        ApiVersion version = null;
        String appVersion = null;
        List<ReferencesSchema> includeReferences = null;
        String date = null;
        String time = null;
        Boolean shouldBuyTickets = null;
        Boolean showIntermediateStops = null;
        Boolean arriveBy = null;
        Boolean wheelchair = null;
        Double triangleSafetyFactor = null;
        Double triangleSlopeFactor = null;
        Double triangleTimeFactor = null;
        String optimize = null;
        WalkProfile walkProfile = null;
        Integer numItineraries = null;
        PlanTripResponse response = api.planAccess(dialect, fromPlace, toPlace, mode, version, appVersion, includeReferences, date, time, shouldBuyTickets, showIntermediateStops, arriveBy, wheelchair, triangleSafetyFactor, triangleSlopeFactor, triangleTimeFactor, optimize, walkProfile, numItineraries);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void planTripTest() throws ApiException {
        Dialect dialect = null;
        String fromPlace = null;
        String toPlace = null;
        List<TraverseMode> mode = null;
        ApiVersion version = null;
        String appVersion = null;
        List<ReferencesSchema> includeReferences = null;
        String date = null;
        String time = null;
        Boolean shouldBuyTickets = null;
        Boolean showIntermediateStops = null;
        Boolean arriveBy = null;
        Boolean wheelchair = null;
        Double triangleSafetyFactor = null;
        Double triangleSlopeFactor = null;
        Double triangleTimeFactor = null;
        String optimize = null;
        WalkProfile walkProfile = null;
        Integer numItineraries = null;
        PlanTripResponse response = api.planTrip(dialect, fromPlace, toPlace, mode, version, appVersion, includeReferences, date, time, shouldBuyTickets, showIntermediateStops, arriveBy, wheelchair, triangleSafetyFactor, triangleSlopeFactor, triangleTimeFactor, optimize, walkProfile, numItineraries);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        Dialect dialect = null;
        String query = null;
        Float lat = null;
        Float lon = null;
        Integer minResult = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        SearchMethodResponse response = api.search(dialect, query, lat, lon, minResult, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAlertsTest() throws ApiException {
        Dialect dialect = null;
        String query = null;
        Long start = null;
        Long end = null;
        Integer minResult = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        AlertSearchMethodResponse response = api.searchAlerts(dialect, query, start, end, minResult, appVersion, version, includeReferences);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchForOnboardDepartVehiclesTest() throws ApiException {
        Dialect dialect = null;
        String appVersion = null;
        ApiVersion version = null;
        List<ReferencesSchema> includeReferences = null;
        List<OnboardDepartPosition> onboardDepartPosition = null;
        OnboardDepartSearchMethodResponse response = api.searchForOnboardDepartVehicles(dialect, appVersion, version, includeReferences, onboardDepartPosition);
        // TODO: test validations
    }

}
