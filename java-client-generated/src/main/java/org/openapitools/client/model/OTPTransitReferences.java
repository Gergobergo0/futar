/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.TransitAgency;
import org.openapitools.client.model.TransitAlert;
import org.openapitools.client.model.TransitRoute;
import org.openapitools.client.model.TransitStop;
import org.openapitools.client.model.TransitTrip;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OTPTransitReferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class OTPTransitReferences {
  public static final String SERIALIZED_NAME_AGENCIES = "agencies";
  @SerializedName(SERIALIZED_NAME_AGENCIES)
  @javax.annotation.Nullable
  private Map<String, TransitAgency> agencies = new HashMap<>();

  public static final String SERIALIZED_NAME_ROUTES = "routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  @javax.annotation.Nullable
  private Map<String, TransitRoute> routes = new HashMap<>();

  public static final String SERIALIZED_NAME_STOPS = "stops";
  @SerializedName(SERIALIZED_NAME_STOPS)
  @javax.annotation.Nullable
  private Map<String, TransitStop> stops = new HashMap<>();

  public static final String SERIALIZED_NAME_TRIPS = "trips";
  @SerializedName(SERIALIZED_NAME_TRIPS)
  @javax.annotation.Nullable
  private Map<String, TransitTrip> trips = new HashMap<>();

  public static final String SERIALIZED_NAME_ALERTS = "alerts";
  @SerializedName(SERIALIZED_NAME_ALERTS)
  @javax.annotation.Nullable
  private Map<String, TransitAlert> alerts = new HashMap<>();

  public OTPTransitReferences() {
  }

  public OTPTransitReferences agencies(@javax.annotation.Nullable Map<String, TransitAgency> agencies) {
    this.agencies = agencies;
    return this;
  }

  public OTPTransitReferences putAgenciesItem(String key, TransitAgency agenciesItem) {
    if (this.agencies == null) {
      this.agencies = new HashMap<>();
    }
    this.agencies.put(key, agenciesItem);
    return this;
  }

  /**
   * Szolgáltatók referenciáinak listája.
   * @return agencies
   */
  @javax.annotation.Nullable
  public Map<String, TransitAgency> getAgencies() {
    return agencies;
  }

  public void setAgencies(@javax.annotation.Nullable Map<String, TransitAgency> agencies) {
    this.agencies = agencies;
  }


  public OTPTransitReferences routes(@javax.annotation.Nullable Map<String, TransitRoute> routes) {
    this.routes = routes;
    return this;
  }

  public OTPTransitReferences putRoutesItem(String key, TransitRoute routesItem) {
    if (this.routes == null) {
      this.routes = new HashMap<>();
    }
    this.routes.put(key, routesItem);
    return this;
  }

  /**
   * Járatok referenciáinak listája.
   * @return routes
   */
  @javax.annotation.Nullable
  public Map<String, TransitRoute> getRoutes() {
    return routes;
  }

  public void setRoutes(@javax.annotation.Nullable Map<String, TransitRoute> routes) {
    this.routes = routes;
  }


  public OTPTransitReferences stops(@javax.annotation.Nullable Map<String, TransitStop> stops) {
    this.stops = stops;
    return this;
  }

  public OTPTransitReferences putStopsItem(String key, TransitStop stopsItem) {
    if (this.stops == null) {
      this.stops = new HashMap<>();
    }
    this.stops.put(key, stopsItem);
    return this;
  }

  /**
   * Megállók referenciáinak listája.
   * @return stops
   */
  @javax.annotation.Nullable
  public Map<String, TransitStop> getStops() {
    return stops;
  }

  public void setStops(@javax.annotation.Nullable Map<String, TransitStop> stops) {
    this.stops = stops;
  }


  public OTPTransitReferences trips(@javax.annotation.Nullable Map<String, TransitTrip> trips) {
    this.trips = trips;
    return this;
  }

  public OTPTransitReferences putTripsItem(String key, TransitTrip tripsItem) {
    if (this.trips == null) {
      this.trips = new HashMap<>();
    }
    this.trips.put(key, tripsItem);
    return this;
  }

  /**
   * Menetek referenciáinak listája.
   * @return trips
   */
  @javax.annotation.Nullable
  public Map<String, TransitTrip> getTrips() {
    return trips;
  }

  public void setTrips(@javax.annotation.Nullable Map<String, TransitTrip> trips) {
    this.trips = trips;
  }


  public OTPTransitReferences alerts(@javax.annotation.Nullable Map<String, TransitAlert> alerts) {
    this.alerts = alerts;
    return this;
  }

  public OTPTransitReferences putAlertsItem(String key, TransitAlert alertsItem) {
    if (this.alerts == null) {
      this.alerts = new HashMap<>();
    }
    this.alerts.put(key, alertsItem);
    return this;
  }

  /**
   * Zavarok referenciáinak listája.
   * @return alerts
   */
  @javax.annotation.Nullable
  public Map<String, TransitAlert> getAlerts() {
    return alerts;
  }

  public void setAlerts(@javax.annotation.Nullable Map<String, TransitAlert> alerts) {
    this.alerts = alerts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OTPTransitReferences otPTransitReferences = (OTPTransitReferences) o;
    return Objects.equals(this.agencies, otPTransitReferences.agencies) &&
        Objects.equals(this.routes, otPTransitReferences.routes) &&
        Objects.equals(this.stops, otPTransitReferences.stops) &&
        Objects.equals(this.trips, otPTransitReferences.trips) &&
        Objects.equals(this.alerts, otPTransitReferences.alerts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agencies, routes, stops, trips, alerts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OTPTransitReferences {\n");
    sb.append("    agencies: ").append(toIndentedString(agencies)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("    trips: ").append(toIndentedString(trips)).append("\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agencies");
    openapiFields.add("routes");
    openapiFields.add("stops");
    openapiFields.add("trips");
    openapiFields.add("alerts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OTPTransitReferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    /*
    if (jsonElement == null) {
        if (!OTPTransitReferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OTPTransitReferences is not found in the empty JSON string", OTPTransitReferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OTPTransitReferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OTPTransitReferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OTPTransitReferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OTPTransitReferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OTPTransitReferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OTPTransitReferences.class));

       return (TypeAdapter<T>) new TypeAdapter<OTPTransitReferences>() {
           @Override
           public void write(JsonWriter out, OTPTransitReferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OTPTransitReferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }*/
  }

  /**
   * Create an instance of OTPTransitReferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OTPTransitReferences
   * @throws IOException if the JSON string is invalid with respect to OTPTransitReferences
   */
  public static OTPTransitReferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OTPTransitReferences.class);
  }

  /**
   * Convert an instance of OTPTransitReferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

