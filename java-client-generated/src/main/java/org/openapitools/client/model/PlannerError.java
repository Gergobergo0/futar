/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A hibát tartalmazza, ha nem sikerült a tervezés.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class PlannerError {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  /**
   * A hibaüzenet kódja.
   */
  @JsonAdapter(MessageEnum.Adapter.class)
  public enum MessageEnum {
    PLAN_OK("PLAN_OK"),
    
    SYSTEM_ERROR("SYSTEM_ERROR"),
    
    GRAPH_UNAVAILABLE("GRAPH_UNAVAILABLE"),
    
    PLANNER_SERVICE_UNAVAILABLE("PLANNER_SERVICE_UNAVAILABLE"),
    
    OUTSIDE_BOUNDS("OUTSIDE_BOUNDS"),
    
    PATH_NOT_FOUND("PATH_NOT_FOUND"),
    
    NO_TRANSIT_TIMES("NO_TRANSIT_TIMES"),
    
    REQUEST_TIMEOUT("REQUEST_TIMEOUT"),
    
    BOGUS_PARAMETER("BOGUS_PARAMETER"),
    
    GEOCODE_FROM_NOT_FOUND("GEOCODE_FROM_NOT_FOUND"),
    
    GEOCODE_TO_NOT_FOUND("GEOCODE_TO_NOT_FOUND"),
    
    GEOCODE_FROM_TO_NOT_FOUND("GEOCODE_FROM_TO_NOT_FOUND"),
    
    TOO_CLOSE("TOO_CLOSE"),
    
    LOCATION_NOT_ACCESSIBLE("LOCATION_NOT_ACCESSIBLE"),
    
    MISSING_MODE("MISSING_MODE"),
    
    GEOCODE_FROM_AMBIGUOUS("GEOCODE_FROM_AMBIGUOUS"),
    
    GEOCODE_TO_AMBIGUOUS("GEOCODE_TO_AMBIGUOUS"),
    
    GEOCODE_FROM_TO_AMBIGUOUS("GEOCODE_FROM_TO_AMBIGUOUS"),
    
    UNDERSPECIFIED_TRIANGLE("UNDERSPECIFIED_TRIANGLE"),
    
    TRIANGLE_NOT_AFFINE("TRIANGLE_NOT_AFFINE"),
    
    TRIANGLE_OPTIMIZE_TYPE_NOT_SET("TRIANGLE_OPTIMIZE_TYPE_NOT_SET"),
    
    TRIANGLE_VALUES_NOT_SET("TRIANGLE_VALUES_NOT_SET");

    private String value;

    MessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageEnum fromValue(String value) {
      for (MessageEnum b : MessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private MessageEnum message;

  public static final String SERIALIZED_NAME_MISSING = "missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  @javax.annotation.Nullable
  private List<String> missing = new ArrayList<>();

  public static final String SERIALIZED_NAME_NO_PATH = "noPath";
  @SerializedName(SERIALIZED_NAME_NO_PATH)
  @javax.annotation.Nullable
  private Boolean noPath;

  /**
   * Gets or Sets msgFromMessage
   */
  @JsonAdapter(MsgFromMessageEnum.Adapter.class)
  public enum MsgFromMessageEnum {
    PLAN_OK("PLAN_OK"),
    
    SYSTEM_ERROR("SYSTEM_ERROR"),
    
    GRAPH_UNAVAILABLE("GRAPH_UNAVAILABLE"),
    
    PLANNER_SERVICE_UNAVAILABLE("PLANNER_SERVICE_UNAVAILABLE"),
    
    OUTSIDE_BOUNDS("OUTSIDE_BOUNDS"),
    
    PATH_NOT_FOUND("PATH_NOT_FOUND"),
    
    NO_TRANSIT_TIMES("NO_TRANSIT_TIMES"),
    
    REQUEST_TIMEOUT("REQUEST_TIMEOUT"),
    
    BOGUS_PARAMETER("BOGUS_PARAMETER"),
    
    GEOCODE_FROM_NOT_FOUND("GEOCODE_FROM_NOT_FOUND"),
    
    GEOCODE_TO_NOT_FOUND("GEOCODE_TO_NOT_FOUND"),
    
    GEOCODE_FROM_TO_NOT_FOUND("GEOCODE_FROM_TO_NOT_FOUND"),
    
    TOO_CLOSE("TOO_CLOSE"),
    
    LOCATION_NOT_ACCESSIBLE("LOCATION_NOT_ACCESSIBLE"),
    
    MISSING_MODE("MISSING_MODE"),
    
    GEOCODE_FROM_AMBIGUOUS("GEOCODE_FROM_AMBIGUOUS"),
    
    GEOCODE_TO_AMBIGUOUS("GEOCODE_TO_AMBIGUOUS"),
    
    GEOCODE_FROM_TO_AMBIGUOUS("GEOCODE_FROM_TO_AMBIGUOUS"),
    
    UNDERSPECIFIED_TRIANGLE("UNDERSPECIFIED_TRIANGLE"),
    
    TRIANGLE_NOT_AFFINE("TRIANGLE_NOT_AFFINE"),
    
    TRIANGLE_OPTIMIZE_TYPE_NOT_SET("TRIANGLE_OPTIMIZE_TYPE_NOT_SET"),
    
    TRIANGLE_VALUES_NOT_SET("TRIANGLE_VALUES_NOT_SET");

    private String value;

    MsgFromMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MsgFromMessageEnum fromValue(String value) {
      for (MsgFromMessageEnum b : MsgFromMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MsgFromMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MsgFromMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MsgFromMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MsgFromMessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MsgFromMessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MSG_FROM_MESSAGE = "msgFromMessage";
  @SerializedName(SERIALIZED_NAME_MSG_FROM_MESSAGE)
  @javax.annotation.Nullable
  private MsgFromMessageEnum msgFromMessage;

  public PlannerError() {
  }

  public PlannerError id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * A hibaüzenet azonosítója.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public PlannerError message(@javax.annotation.Nullable MessageEnum message) {
    this.message = message;
    return this;
  }

  /**
   * A hibaüzenet kódja.
   * @return message
   */
  @javax.annotation.Nullable
  public MessageEnum getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable MessageEnum message) {
    this.message = message;
  }


  public PlannerError missing(@javax.annotation.Nullable List<String> missing) {
    this.missing = missing;
    return this;
  }

  public PlannerError addMissingItem(String missingItem) {
    if (this.missing == null) {
      this.missing = new ArrayList<>();
    }
    this.missing.add(missingItem);
    return this;
  }

  /**
   * A rossz paraméterek listája.
   * @return missing
   */
  @javax.annotation.Nullable
  public List<String> getMissing() {
    return missing;
  }

  public void setMissing(@javax.annotation.Nullable List<String> missing) {
    this.missing = missing;
  }


  public PlannerError noPath(@javax.annotation.Nullable Boolean noPath) {
    this.noPath = noPath;
    return this;
  }

  /**
   * Igaz, ha nem sikerült útvonalat találni.
   * @return noPath
   */
  @javax.annotation.Nullable
  public Boolean getNoPath() {
    return noPath;
  }

  public void setNoPath(@javax.annotation.Nullable Boolean noPath) {
    this.noPath = noPath;
  }


  public PlannerError msgFromMessage(@javax.annotation.Nullable MsgFromMessageEnum msgFromMessage) {
    this.msgFromMessage = msgFromMessage;
    return this;
  }

  /**
   * Get msgFromMessage
   * @return msgFromMessage
   */
  @javax.annotation.Nullable
  public MsgFromMessageEnum getMsgFromMessage() {
    return msgFromMessage;
  }

  public void setMsgFromMessage(@javax.annotation.Nullable MsgFromMessageEnum msgFromMessage) {
    this.msgFromMessage = msgFromMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlannerError plannerError = (PlannerError) o;
    return Objects.equals(this.id, plannerError.id) &&
        Objects.equals(this.message, plannerError.message) &&
        Objects.equals(this.missing, plannerError.missing) &&
        Objects.equals(this.noPath, plannerError.noPath) &&
        Objects.equals(this.msgFromMessage, plannerError.msgFromMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, message, missing, noPath, msgFromMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlannerError {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    noPath: ").append(toIndentedString(noPath)).append("\n");
    sb.append("    msgFromMessage: ").append(toIndentedString(msgFromMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("missing");
    openapiFields.add("noPath");
    openapiFields.add("msgFromMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlannerError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlannerError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlannerError is not found in the empty JSON string", PlannerError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlannerError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlannerError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        MessageEnum.validateJsonElement(jsonObj.get("message"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("missing") != null && !jsonObj.get("missing").isJsonNull() && !jsonObj.get("missing").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missing` to be an array in the JSON string but got `%s`", jsonObj.get("missing").toString()));
      }
      if ((jsonObj.get("msgFromMessage") != null && !jsonObj.get("msgFromMessage").isJsonNull()) && !jsonObj.get("msgFromMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msgFromMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msgFromMessage").toString()));
      }
      // validate the optional field `msgFromMessage`
      if (jsonObj.get("msgFromMessage") != null && !jsonObj.get("msgFromMessage").isJsonNull()) {
        MsgFromMessageEnum.validateJsonElement(jsonObj.get("msgFromMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlannerError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlannerError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlannerError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlannerError.class));

       return (TypeAdapter<T>) new TypeAdapter<PlannerError>() {
           @Override
           public void write(JsonWriter out, PlannerError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlannerError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlannerError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlannerError
   * @throws IOException if the JSON string is invalid with respect to PlannerError
   */
  public static PlannerError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlannerError.class);
  }

  /**
   * Convert an instance of PlannerError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

