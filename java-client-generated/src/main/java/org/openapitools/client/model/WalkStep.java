/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BikeStreetCategory;
import org.openapitools.client.model.EncodedPolylineBean;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Az útvonal lépései gyalogos, kerékpáros vagy autós láb lesetén.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class WalkStep {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  @javax.annotation.Nullable
  private Double distance;

  /**
   * A lépés iránya.
   */
  @JsonAdapter(RelativeDirectionEnum.Adapter.class)
  public enum RelativeDirectionEnum {
    DEPART("DEPART"),
    
    HARD_LEFT("HARD_LEFT"),
    
    LEFT("LEFT"),
    
    SLIGHTLY_LEFT("SLIGHTLY_LEFT"),
    
    CONTINUE("CONTINUE"),
    
    SLIGHTLY_RIGHT("SLIGHTLY_RIGHT"),
    
    RIGHT("RIGHT"),
    
    HARD_RIGHT("HARD_RIGHT"),
    
    CIRCLE_CLOCKWISE("CIRCLE_CLOCKWISE"),
    
    CIRCLE_COUNTERCLOCKWISE("CIRCLE_COUNTERCLOCKWISE"),
    
    ELEVATOR("ELEVATOR"),
    
    UTURN_LEFT("UTURN_LEFT"),
    
    UTURN_RIGHT("UTURN_RIGHT");

    private String value;

    RelativeDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeDirectionEnum fromValue(String value) {
      for (RelativeDirectionEnum b : RelativeDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_DIRECTION = "relativeDirection";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DIRECTION)
  @javax.annotation.Nullable
  private RelativeDirectionEnum relativeDirection;

  public static final String SERIALIZED_NAME_STREET_NAME = "streetName";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  @javax.annotation.Nullable
  private String streetName;

  /**
   * A lépés abszolút iránya.
   */
  @JsonAdapter(AbsoluteDirectionEnum.Adapter.class)
  public enum AbsoluteDirectionEnum {
    NORTH("NORTH"),
    
    NORTHEAST("NORTHEAST"),
    
    EAST("EAST"),
    
    SOUTHEAST("SOUTHEAST"),
    
    SOUTH("SOUTH"),
    
    SOUTHWEST("SOUTHWEST"),
    
    WEST("WEST"),
    
    NORTHWEST("NORTHWEST");

    private String value;

    AbsoluteDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AbsoluteDirectionEnum fromValue(String value) {
      for (AbsoluteDirectionEnum b : AbsoluteDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AbsoluteDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AbsoluteDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AbsoluteDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AbsoluteDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AbsoluteDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ABSOLUTE_DIRECTION = "absoluteDirection";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_DIRECTION)
  @javax.annotation.Nullable
  private AbsoluteDirectionEnum absoluteDirection;

  public static final String SERIALIZED_NAME_STAY_ON = "stayOn";
  @SerializedName(SERIALIZED_NAME_STAY_ON)
  @javax.annotation.Nullable
  private Boolean stayOn;

  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  @javax.annotation.Nullable
  private Boolean area;

  public static final String SERIALIZED_NAME_BOGUS_NAME = "bogusName";
  @SerializedName(SERIALIZED_NAME_BOGUS_NAME)
  @javax.annotation.Nullable
  private Boolean bogusName;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  @javax.annotation.Nullable
  private Double lon;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  @javax.annotation.Nullable
  private Double lat;

  /**
   * A szakasz egyirányúsága.
   */
  @JsonAdapter(BicycleStreetDirectionEnum.Adapter.class)
  public enum BicycleStreetDirectionEnum {
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    ONEWAY_WITH_TRAFFIC("ONEWAY_WITH_TRAFFIC"),
    
    ONEWAY_AGAINST_TRAFFIC("ONEWAY_AGAINST_TRAFFIC");

    private String value;

    BicycleStreetDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BicycleStreetDirectionEnum fromValue(String value) {
      for (BicycleStreetDirectionEnum b : BicycleStreetDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BicycleStreetDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BicycleStreetDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BicycleStreetDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BicycleStreetDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BicycleStreetDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BICYCLE_STREET_DIRECTION = "bicycleStreetDirection";
  @SerializedName(SERIALIZED_NAME_BICYCLE_STREET_DIRECTION)
  @javax.annotation.Nullable
  private BicycleStreetDirectionEnum bicycleStreetDirection;

  public static final String SERIALIZED_NAME_BICYCLE_CATEGORY = "bicycleCategory";
  @SerializedName(SERIALIZED_NAME_BICYCLE_CATEGORY)
  @javax.annotation.Nullable
  private BikeStreetCategory bicycleCategory;

  public static final String SERIALIZED_NAME_WALKING_BIKE = "walkingBike";
  @SerializedName(SERIALIZED_NAME_WALKING_BIKE)
  @javax.annotation.Nullable
  private Boolean walkingBike;

  public static final String SERIALIZED_NAME_GEOMETRY = "geometry";
  @SerializedName(SERIALIZED_NAME_GEOMETRY)
  @javax.annotation.Nullable
  private EncodedPolylineBean geometry;

  public WalkStep() {
  }

  public WalkStep distance(@javax.annotation.Nullable Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * A lépés hossza méterben.
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(@javax.annotation.Nullable Double distance) {
    this.distance = distance;
  }


  public WalkStep relativeDirection(@javax.annotation.Nullable RelativeDirectionEnum relativeDirection) {
    this.relativeDirection = relativeDirection;
    return this;
  }

  /**
   * A lépés iránya.
   * @return relativeDirection
   */
  @javax.annotation.Nullable
  public RelativeDirectionEnum getRelativeDirection() {
    return relativeDirection;
  }

  public void setRelativeDirection(@javax.annotation.Nullable RelativeDirectionEnum relativeDirection) {
    this.relativeDirection = relativeDirection;
  }


  public WalkStep streetName(@javax.annotation.Nullable String streetName) {
    this.streetName = streetName;
    return this;
  }

  /**
   * Az utca neve, amin a lépés halad.
   * @return streetName
   */
  @javax.annotation.Nullable
  public String getStreetName() {
    return streetName;
  }

  public void setStreetName(@javax.annotation.Nullable String streetName) {
    this.streetName = streetName;
  }


  public WalkStep absoluteDirection(@javax.annotation.Nullable AbsoluteDirectionEnum absoluteDirection) {
    this.absoluteDirection = absoluteDirection;
    return this;
  }

  /**
   * A lépés abszolút iránya.
   * @return absoluteDirection
   */
  @javax.annotation.Nullable
  public AbsoluteDirectionEnum getAbsoluteDirection() {
    return absoluteDirection;
  }

  public void setAbsoluteDirection(@javax.annotation.Nullable AbsoluteDirectionEnum absoluteDirection) {
    this.absoluteDirection = absoluteDirection;
  }


  public WalkStep stayOn(@javax.annotation.Nullable Boolean stayOn) {
    this.stayOn = stayOn;
    return this;
  }

  /**
   * Jelzi, hogy az utca irányt vált egy kereszteződésben.
   * @return stayOn
   */
  @javax.annotation.Nullable
  public Boolean getStayOn() {
    return stayOn;
  }

  public void setStayOn(@javax.annotation.Nullable Boolean stayOn) {
    this.stayOn = stayOn;
  }


  public WalkStep area(@javax.annotation.Nullable Boolean area) {
    this.area = area;
    return this;
  }

  /**
   * Jelzi, hogy a lépés egy nyílt terület, pl.: pláza, vagy vonat peron.
   * @return area
   */
  @javax.annotation.Nullable
  public Boolean getArea() {
    return area;
  }

  public void setArea(@javax.annotation.Nullable Boolean area) {
    this.area = area;
  }


  public WalkStep bogusName(@javax.annotation.Nullable Boolean bogusName) {
    this.bogusName = bogusName;
    return this;
  }

  /**
   * Jelzi, hogy az utca nevét a rendszer generálta.
   * @return bogusName
   */
  @javax.annotation.Nullable
  public Boolean getBogusName() {
    return bogusName;
  }

  public void setBogusName(@javax.annotation.Nullable Boolean bogusName) {
    this.bogusName = bogusName;
  }


  public WalkStep lon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * A lépés kezdetének hosszúsági koordinátája.
   * @return lon
   */
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
  }


  public WalkStep lat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * A lépés kezdetének szélességi koordinátája.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
  }


  public WalkStep bicycleStreetDirection(@javax.annotation.Nullable BicycleStreetDirectionEnum bicycleStreetDirection) {
    this.bicycleStreetDirection = bicycleStreetDirection;
    return this;
  }

  /**
   * A szakasz egyirányúsága.
   * @return bicycleStreetDirection
   */
  @javax.annotation.Nullable
  public BicycleStreetDirectionEnum getBicycleStreetDirection() {
    return bicycleStreetDirection;
  }

  public void setBicycleStreetDirection(@javax.annotation.Nullable BicycleStreetDirectionEnum bicycleStreetDirection) {
    this.bicycleStreetDirection = bicycleStreetDirection;
  }


  public WalkStep bicycleCategory(@javax.annotation.Nullable BikeStreetCategory bicycleCategory) {
    this.bicycleCategory = bicycleCategory;
    return this;
  }

  /**
   * Get bicycleCategory
   * @return bicycleCategory
   */
  @javax.annotation.Nullable
  public BikeStreetCategory getBicycleCategory() {
    return bicycleCategory;
  }

  public void setBicycleCategory(@javax.annotation.Nullable BikeStreetCategory bicycleCategory) {
    this.bicycleCategory = bicycleCategory;
  }


  public WalkStep walkingBike(@javax.annotation.Nullable Boolean walkingBike) {
    this.walkingBike = walkingBike;
    return this;
  }

  /**
   * Jelzi, hogy a szakszon sétálni kell kerékpáros tervezés esetén.
   * @return walkingBike
   */
  @javax.annotation.Nullable
  public Boolean getWalkingBike() {
    return walkingBike;
  }

  public void setWalkingBike(@javax.annotation.Nullable Boolean walkingBike) {
    this.walkingBike = walkingBike;
  }


  public WalkStep geometry(@javax.annotation.Nullable EncodedPolylineBean geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Get geometry
   * @return geometry
   */
  @javax.annotation.Nullable
  public EncodedPolylineBean getGeometry() {
    return geometry;
  }

  public void setGeometry(@javax.annotation.Nullable EncodedPolylineBean geometry) {
    this.geometry = geometry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalkStep walkStep = (WalkStep) o;
    return Objects.equals(this.distance, walkStep.distance) &&
        Objects.equals(this.relativeDirection, walkStep.relativeDirection) &&
        Objects.equals(this.streetName, walkStep.streetName) &&
        Objects.equals(this.absoluteDirection, walkStep.absoluteDirection) &&
        Objects.equals(this.stayOn, walkStep.stayOn) &&
        Objects.equals(this.area, walkStep.area) &&
        Objects.equals(this.bogusName, walkStep.bogusName) &&
        Objects.equals(this.lon, walkStep.lon) &&
        Objects.equals(this.lat, walkStep.lat) &&
        Objects.equals(this.bicycleStreetDirection, walkStep.bicycleStreetDirection) &&
        Objects.equals(this.bicycleCategory, walkStep.bicycleCategory) &&
        Objects.equals(this.walkingBike, walkStep.walkingBike) &&
        Objects.equals(this.geometry, walkStep.geometry);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, relativeDirection, streetName, absoluteDirection, stayOn, area, bogusName, lon, lat, bicycleStreetDirection, bicycleCategory, walkingBike, geometry);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalkStep {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    relativeDirection: ").append(toIndentedString(relativeDirection)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    absoluteDirection: ").append(toIndentedString(absoluteDirection)).append("\n");
    sb.append("    stayOn: ").append(toIndentedString(stayOn)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    bogusName: ").append(toIndentedString(bogusName)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    bicycleStreetDirection: ").append(toIndentedString(bicycleStreetDirection)).append("\n");
    sb.append("    bicycleCategory: ").append(toIndentedString(bicycleCategory)).append("\n");
    sb.append("    walkingBike: ").append(toIndentedString(walkingBike)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distance");
    openapiFields.add("relativeDirection");
    openapiFields.add("streetName");
    openapiFields.add("absoluteDirection");
    openapiFields.add("stayOn");
    openapiFields.add("area");
    openapiFields.add("bogusName");
    openapiFields.add("lon");
    openapiFields.add("lat");
    openapiFields.add("bicycleStreetDirection");
    openapiFields.add("bicycleCategory");
    openapiFields.add("walkingBike");
    openapiFields.add("geometry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WalkStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    /*
      if (jsonElement == null) {
        if (!WalkStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WalkStep is not found in the empty JSON string", WalkStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WalkStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WalkStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("relativeDirection") != null && !jsonObj.get("relativeDirection").isJsonNull()) && !jsonObj.get("relativeDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeDirection").toString()));
      }
      // validate the optional field `relativeDirection`
      if (jsonObj.get("relativeDirection") != null && !jsonObj.get("relativeDirection").isJsonNull()) {
        RelativeDirectionEnum.validateJsonElement(jsonObj.get("relativeDirection"));
      }
      if ((jsonObj.get("streetName") != null && !jsonObj.get("streetName").isJsonNull()) && !jsonObj.get("streetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetName").toString()));
      }
      if ((jsonObj.get("absoluteDirection") != null && !jsonObj.get("absoluteDirection").isJsonNull()) && !jsonObj.get("absoluteDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absoluteDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absoluteDirection").toString()));
      }
      // validate the optional field `absoluteDirection`
      if (jsonObj.get("absoluteDirection") != null && !jsonObj.get("absoluteDirection").isJsonNull()) {
        AbsoluteDirectionEnum.validateJsonElement(jsonObj.get("absoluteDirection"));
      }
      if ((jsonObj.get("bicycleStreetDirection") != null && !jsonObj.get("bicycleStreetDirection").isJsonNull()) && !jsonObj.get("bicycleStreetDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bicycleStreetDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bicycleStreetDirection").toString()));
      }
      // validate the optional field `bicycleStreetDirection`
      if (jsonObj.get("bicycleStreetDirection") != null && !jsonObj.get("bicycleStreetDirection").isJsonNull()) {
        BicycleStreetDirectionEnum.validateJsonElement(jsonObj.get("bicycleStreetDirection"));
      }
      // validate the optional field `bicycleCategory`
      if (jsonObj.get("bicycleCategory") != null && !jsonObj.get("bicycleCategory").isJsonNull()) {
        BikeStreetCategory.validateJsonElement(jsonObj.get("bicycleCategory"));
      }
      // validate the optional field `geometry`
      if (jsonObj.get("geometry") != null && !jsonObj.get("geometry").isJsonNull()) {
        EncodedPolylineBean.validateJsonElement(jsonObj.get("geometry"));
      }*/
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WalkStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WalkStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WalkStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WalkStep.class));

       return (TypeAdapter<T>) new TypeAdapter<WalkStep>() {
           @Override
           public void write(JsonWriter out, WalkStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WalkStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WalkStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WalkStep
   * @throws IOException if the JSON string is invalid with respect to WalkStep
   */
  public static WalkStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WalkStep.class);
  }

  /**
   * Convert an instance of WalkStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

