/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Menetek referenciáinak listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitTrip {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_ROUTE_ID = "routeId";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  @javax.annotation.Nullable
  private String routeId;

  public static final String SERIALIZED_NAME_SHAPE_ID = "shapeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_ID)
  @javax.annotation.Nullable
  private String shapeId;

  public static final String SERIALIZED_NAME_BLOCK_ID = "blockId";
  @SerializedName(SERIALIZED_NAME_BLOCK_ID)
  @javax.annotation.Nullable
  private String blockId;

  public static final String SERIALIZED_NAME_TRIP_HEADSIGN = "tripHeadsign";
  @SerializedName(SERIALIZED_NAME_TRIP_HEADSIGN)
  @javax.annotation.Nullable
  private String tripHeadsign;

  public static final String SERIALIZED_NAME_TRIP_SHORT_NAME = "tripShortName";
  @SerializedName(SERIALIZED_NAME_TRIP_SHORT_NAME)
  @javax.annotation.Nullable
  private String tripShortName;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  @javax.annotation.Nullable
  private String serviceId;

  public static final String SERIALIZED_NAME_DIRECTION_ID = "directionId";
  @SerializedName(SERIALIZED_NAME_DIRECTION_ID)
  @javax.annotation.Nullable
  private String directionId;

  public static final String SERIALIZED_NAME_BIKES_ALLOWED = "bikesAllowed";
  @SerializedName(SERIALIZED_NAME_BIKES_ALLOWED)
  @javax.annotation.Nullable
  private Boolean bikesAllowed;

  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE = "wheelchairAccessible";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE)
  @javax.annotation.Nullable
  private Boolean wheelchairAccessible;

  public TransitTrip() {
  }

  public TransitTrip id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * A menet azonosítója.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TransitTrip routeId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * A menethez tartozó járat azonosítója.
   * @return routeId
   */
  @javax.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
  }


  public TransitTrip shapeId(@javax.annotation.Nullable String shapeId) {
    this.shapeId = shapeId;
    return this;
  }

  /**
   * A menet útvonalvezetésének azonosítója.
   * @return shapeId
   */
  @javax.annotation.Nullable
  public String getShapeId() {
    return shapeId;
  }

  public void setShapeId(@javax.annotation.Nullable String shapeId) {
    this.shapeId = shapeId;
  }


  public TransitTrip blockId(@javax.annotation.Nullable String blockId) {
    this.blockId = blockId;
    return this;
  }

  /**
   * A menethez tartozó GTFS block_id, amennyiben létezik.
   * @return blockId
   */
  @javax.annotation.Nullable
  public String getBlockId() {
    return blockId;
  }

  public void setBlockId(@javax.annotation.Nullable String blockId) {
    this.blockId = blockId;
  }


  public TransitTrip tripHeadsign(@javax.annotation.Nullable String tripHeadsign) {
    this.tripHeadsign = tripHeadsign;
    return this;
  }

  /**
   * A menet célállomása.
   * @return tripHeadsign
   */
  @javax.annotation.Nullable
  public String getTripHeadsign() {
    return tripHeadsign;
  }

  public void setTripHeadsign(@javax.annotation.Nullable String tripHeadsign) {
    this.tripHeadsign = tripHeadsign;
  }


  public TransitTrip tripShortName(@javax.annotation.Nullable String tripShortName) {
    this.tripShortName = tripShortName;
    return this;
  }

  /**
   * A menet rövid neve.
   * @return tripShortName
   */
  @javax.annotation.Nullable
  public String getTripShortName() {
    return tripShortName;
  }

  public void setTripShortName(@javax.annotation.Nullable String tripShortName) {
    this.tripShortName = tripShortName;
  }


  public TransitTrip serviceId(@javax.annotation.Nullable String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * A menet közlekedési naptárának azonosítója.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(@javax.annotation.Nullable String serviceId) {
    this.serviceId = serviceId;
  }


  public TransitTrip directionId(@javax.annotation.Nullable String directionId) {
    this.directionId = directionId;
    return this;
  }

  /**
   * A menet irányának azonosítója.
   * @return directionId
   */
  @javax.annotation.Nullable
  public String getDirectionId() {
    return directionId;
  }

  public void setDirectionId(@javax.annotation.Nullable String directionId) {
    this.directionId = directionId;
  }


  public TransitTrip bikesAllowed(@javax.annotation.Nullable Boolean bikesAllowed) {
    this.bikesAllowed = bikesAllowed;
    return this;
  }

  /**
   * Szállítható-e kerékpár a meneten.
   * @return bikesAllowed
   */
  @javax.annotation.Nullable
  public Boolean getBikesAllowed() {
    return bikesAllowed;
  }

  public void setBikesAllowed(@javax.annotation.Nullable Boolean bikesAllowed) {
    this.bikesAllowed = bikesAllowed;
  }


  public TransitTrip wheelchairAccessible(@javax.annotation.Nullable Boolean wheelchairAccessible) {
    this.wheelchairAccessible = wheelchairAccessible;
    return this;
  }

  /**
   * Alacsonypadlós-e a menet.
   * @return wheelchairAccessible
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessible() {
    return wheelchairAccessible;
  }

  public void setWheelchairAccessible(@javax.annotation.Nullable Boolean wheelchairAccessible) {
    this.wheelchairAccessible = wheelchairAccessible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitTrip transitTrip = (TransitTrip) o;
    return Objects.equals(this.id, transitTrip.id) &&
        Objects.equals(this.routeId, transitTrip.routeId) &&
        Objects.equals(this.shapeId, transitTrip.shapeId) &&
        Objects.equals(this.blockId, transitTrip.blockId) &&
        Objects.equals(this.tripHeadsign, transitTrip.tripHeadsign) &&
        Objects.equals(this.tripShortName, transitTrip.tripShortName) &&
        Objects.equals(this.serviceId, transitTrip.serviceId) &&
        Objects.equals(this.directionId, transitTrip.directionId) &&
        Objects.equals(this.bikesAllowed, transitTrip.bikesAllowed) &&
        Objects.equals(this.wheelchairAccessible, transitTrip.wheelchairAccessible);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, routeId, shapeId, blockId, tripHeadsign, tripShortName, serviceId, directionId, bikesAllowed, wheelchairAccessible);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitTrip {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    shapeId: ").append(toIndentedString(shapeId)).append("\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    tripHeadsign: ").append(toIndentedString(tripHeadsign)).append("\n");
    sb.append("    tripShortName: ").append(toIndentedString(tripShortName)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    directionId: ").append(toIndentedString(directionId)).append("\n");
    sb.append("    bikesAllowed: ").append(toIndentedString(bikesAllowed)).append("\n");
    sb.append("    wheelchairAccessible: ").append(toIndentedString(wheelchairAccessible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("routeId");
    openapiFields.add("shapeId");
    openapiFields.add("blockId");
    openapiFields.add("tripHeadsign");
    openapiFields.add("tripShortName");
    openapiFields.add("serviceId");
    openapiFields.add("directionId");
    openapiFields.add("bikesAllowed");
    openapiFields.add("wheelchairAccessible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitTrip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitTrip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitTrip is not found in the empty JSON string", TransitTrip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitTrip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitTrip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("routeId") != null && !jsonObj.get("routeId").isJsonNull()) && !jsonObj.get("routeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeId").toString()));
      }
      if ((jsonObj.get("shapeId") != null && !jsonObj.get("shapeId").isJsonNull()) && !jsonObj.get("shapeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeId").toString()));
      }
      if ((jsonObj.get("blockId") != null && !jsonObj.get("blockId").isJsonNull()) && !jsonObj.get("blockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockId").toString()));
      }
      if ((jsonObj.get("tripHeadsign") != null && !jsonObj.get("tripHeadsign").isJsonNull()) && !jsonObj.get("tripHeadsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripHeadsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripHeadsign").toString()));
      }
      if ((jsonObj.get("tripShortName") != null && !jsonObj.get("tripShortName").isJsonNull()) && !jsonObj.get("tripShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripShortName").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("directionId") != null && !jsonObj.get("directionId").isJsonNull()) && !jsonObj.get("directionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitTrip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitTrip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitTrip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitTrip.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitTrip>() {
           @Override
           public void write(JsonWriter out, TransitTrip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitTrip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitTrip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitTrip
   * @throws IOException if the JSON string is invalid with respect to TransitTrip
   */
  public static TransitTrip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitTrip.class);
  }

  /**
   * Convert an instance of TransitTrip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

