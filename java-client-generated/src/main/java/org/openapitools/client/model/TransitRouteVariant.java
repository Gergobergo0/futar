/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransitPolyline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A járathoz tartozó járat variánsok listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitRouteVariant {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_STOP_IDS = "stopIds";
  @SerializedName(SERIALIZED_NAME_STOP_IDS)
  @javax.annotation.Nullable
  private List<String> stopIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAY_REQUIRE_BOOKING = "mayRequireBooking";
  @SerializedName(SERIALIZED_NAME_MAY_REQUIRE_BOOKING)
  @javax.annotation.Nullable
  private Boolean mayRequireBooking;

  public static final String SERIALIZED_NAME_BOOKABLE_STOP_IDS = "bookableStopIds";
  @SerializedName(SERIALIZED_NAME_BOOKABLE_STOP_IDS)
  @javax.annotation.Nullable
  private List<String> bookableStopIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nullable
  private String direction;

  public static final String SERIALIZED_NAME_HEADSIGN = "headsign";
  @SerializedName(SERIALIZED_NAME_HEADSIGN)
  @javax.annotation.Nullable
  private String headsign;

  public static final String SERIALIZED_NAME_POLYLINE = "polyline";
  @SerializedName(SERIALIZED_NAME_POLYLINE)
  @javax.annotation.Nullable
  private TransitPolyline polyline;

  public static final String SERIALIZED_NAME_ROUTE_ID = "routeId";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  @javax.annotation.Nullable
  private String routeId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public TransitRouteVariant() {
  }

  public TransitRouteVariant name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * A járat variáns neve.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TransitRouteVariant stopIds(@javax.annotation.Nullable List<String> stopIds) {
    this.stopIds = stopIds;
    return this;
  }

  public TransitRouteVariant addStopIdsItem(String stopIdsItem) {
    if (this.stopIds == null) {
      this.stopIds = new ArrayList<>();
    }
    this.stopIds.add(stopIdsItem);
    return this;
  }

  /**
   * A járat variáns megállóinak azonosítói.
   * @return stopIds
   */
  @javax.annotation.Nullable
  public List<String> getStopIds() {
    return stopIds;
  }

  public void setStopIds(@javax.annotation.Nullable List<String> stopIds) {
    this.stopIds = stopIds;
  }


  public TransitRouteVariant mayRequireBooking(@javax.annotation.Nullable Boolean mayRequireBooking) {
    this.mayRequireBooking = mayRequireBooking;
    return this;
  }

  /**
   * Igaz, ha a járaton vannak olyan menetek, amelyeken szükséges lehet az előre foglalás.
   * @return mayRequireBooking
   */
  @javax.annotation.Nullable
  public Boolean getMayRequireBooking() {
    return mayRequireBooking;
  }

  public void setMayRequireBooking(@javax.annotation.Nullable Boolean mayRequireBooking) {
    this.mayRequireBooking = mayRequireBooking;
  }


  public TransitRouteVariant bookableStopIds(@javax.annotation.Nullable List<String> bookableStopIds) {
    this.bookableStopIds = bookableStopIds;
    return this;
  }

  public TransitRouteVariant addBookableStopIdsItem(String bookableStopIdsItem) {
    if (this.bookableStopIds == null) {
      this.bookableStopIds = new ArrayList<>();
    }
    this.bookableStopIds.add(bookableStopIdsItem);
    return this;
  }

  /**
   * A járat variáns megálló azonosítói, amelyekre lehetséges lehet a foglalás.
   * @return bookableStopIds
   */
  @javax.annotation.Nullable
  public List<String> getBookableStopIds() {
    return bookableStopIds;
  }

  public void setBookableStopIds(@javax.annotation.Nullable List<String> bookableStopIds) {
    this.bookableStopIds = bookableStopIds;
  }


  public TransitRouteVariant direction(@javax.annotation.Nullable String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * A járat variáns iránya.
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nullable String direction) {
    this.direction = direction;
  }


  public TransitRouteVariant headsign(@javax.annotation.Nullable String headsign) {
    this.headsign = headsign;
    return this;
  }

  /**
   * A járat variáns célállomása.
   * @return headsign
   */
  @javax.annotation.Nullable
  public String getHeadsign() {
    return headsign;
  }

  public void setHeadsign(@javax.annotation.Nullable String headsign) {
    this.headsign = headsign;
  }


  public TransitRouteVariant polyline(@javax.annotation.Nullable TransitPolyline polyline) {
    this.polyline = polyline;
    return this;
  }

  /**
   * Get polyline
   * @return polyline
   */
  @javax.annotation.Nullable
  public TransitPolyline getPolyline() {
    return polyline;
  }

  public void setPolyline(@javax.annotation.Nullable TransitPolyline polyline) {
    this.polyline = polyline;
  }


  public TransitRouteVariant routeId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * A járat variánshoz tartozó járat azonosítója. Akkor van kitöltve, ha különbözik az eredetitől.
   * @return routeId
   */
  @javax.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
  }


  public TransitRouteVariant type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * A járat variáns típusa.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitRouteVariant transitRouteVariant = (TransitRouteVariant) o;
    return Objects.equals(this.name, transitRouteVariant.name) &&
        Objects.equals(this.stopIds, transitRouteVariant.stopIds) &&
        Objects.equals(this.mayRequireBooking, transitRouteVariant.mayRequireBooking) &&
        Objects.equals(this.bookableStopIds, transitRouteVariant.bookableStopIds) &&
        Objects.equals(this.direction, transitRouteVariant.direction) &&
        Objects.equals(this.headsign, transitRouteVariant.headsign) &&
        Objects.equals(this.polyline, transitRouteVariant.polyline) &&
        Objects.equals(this.routeId, transitRouteVariant.routeId) &&
        Objects.equals(this.type, transitRouteVariant.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, stopIds, mayRequireBooking, bookableStopIds, direction, headsign, polyline, routeId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitRouteVariant {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stopIds: ").append(toIndentedString(stopIds)).append("\n");
    sb.append("    mayRequireBooking: ").append(toIndentedString(mayRequireBooking)).append("\n");
    sb.append("    bookableStopIds: ").append(toIndentedString(bookableStopIds)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    headsign: ").append(toIndentedString(headsign)).append("\n");
    sb.append("    polyline: ").append(toIndentedString(polyline)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("stopIds");
    openapiFields.add("mayRequireBooking");
    openapiFields.add("bookableStopIds");
    openapiFields.add("direction");
    openapiFields.add("headsign");
    openapiFields.add("polyline");
    openapiFields.add("routeId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitRouteVariant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitRouteVariant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitRouteVariant is not found in the empty JSON string", TransitRouteVariant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitRouteVariant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitRouteVariant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stopIds") != null && !jsonObj.get("stopIds").isJsonNull() && !jsonObj.get("stopIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopIds` to be an array in the JSON string but got `%s`", jsonObj.get("stopIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bookableStopIds") != null && !jsonObj.get("bookableStopIds").isJsonNull() && !jsonObj.get("bookableStopIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookableStopIds` to be an array in the JSON string but got `%s`", jsonObj.get("bookableStopIds").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("headsign") != null && !jsonObj.get("headsign").isJsonNull()) && !jsonObj.get("headsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headsign").toString()));
      }
      // validate the optional field `polyline`
      if (jsonObj.get("polyline") != null && !jsonObj.get("polyline").isJsonNull()) {
        TransitPolyline.validateJsonElement(jsonObj.get("polyline"));
      }
      if ((jsonObj.get("routeId") != null && !jsonObj.get("routeId").isJsonNull()) && !jsonObj.get("routeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitRouteVariant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitRouteVariant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitRouteVariant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitRouteVariant.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitRouteVariant>() {
           @Override
           public void write(JsonWriter out, TransitRouteVariant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitRouteVariant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitRouteVariant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitRouteVariant
   * @throws IOException if the JSON string is invalid with respect to TransitRouteVariant
   */
  public static TransitRouteVariant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitRouteVariant.class);
  }

  /**
   * Convert an instance of TransitRouteVariant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

