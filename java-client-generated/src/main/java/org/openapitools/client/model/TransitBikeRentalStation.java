/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A lekért adatok listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitBikeRentalStation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  @javax.annotation.Nullable
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  @javax.annotation.Nullable
  private Double lon;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_BIKES = "bikes";
  @SerializedName(SERIALIZED_NAME_BIKES)
  @javax.annotation.Nullable
  private Integer bikes;

  public static final String SERIALIZED_NAME_SPACES = "spaces";
  @SerializedName(SERIALIZED_NAME_SPACES)
  @javax.annotation.Nullable
  private Integer spaces;

  public TransitBikeRentalStation() {
  }

  public TransitBikeRentalStation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Az állomás azonosítója.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TransitBikeRentalStation lat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Az állomás szélességi koordinátája.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
  }


  public TransitBikeRentalStation lon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Az állomás hosszúsági koordinátája.
   * @return lon
   */
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
  }


  public TransitBikeRentalStation name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Az állomás neve.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TransitBikeRentalStation code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Az állomás kódja.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public TransitBikeRentalStation type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Az állomás típusa.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public TransitBikeRentalStation bikes(@javax.annotation.Nullable Integer bikes) {
    this.bikes = bikes;
    return this;
  }

  /**
   * Az állomáson elérhető kerékpárok száma.
   * @return bikes
   */
  @javax.annotation.Nullable
  public Integer getBikes() {
    return bikes;
  }

  public void setBikes(@javax.annotation.Nullable Integer bikes) {
    this.bikes = bikes;
  }


  public TransitBikeRentalStation spaces(@javax.annotation.Nullable Integer spaces) {
    this.spaces = spaces;
    return this;
  }

  /**
   * Az állomás összes helyének száma. Ez mindig fix 999.
   * @return spaces
   */
  @javax.annotation.Nullable
  public Integer getSpaces() {
    return spaces;
  }

  public void setSpaces(@javax.annotation.Nullable Integer spaces) {
    this.spaces = spaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitBikeRentalStation transitBikeRentalStation = (TransitBikeRentalStation) o;
    return Objects.equals(this.id, transitBikeRentalStation.id) &&
        Objects.equals(this.lat, transitBikeRentalStation.lat) &&
        Objects.equals(this.lon, transitBikeRentalStation.lon) &&
        Objects.equals(this.name, transitBikeRentalStation.name) &&
        Objects.equals(this.code, transitBikeRentalStation.code) &&
        Objects.equals(this.type, transitBikeRentalStation.type) &&
        Objects.equals(this.bikes, transitBikeRentalStation.bikes) &&
        Objects.equals(this.spaces, transitBikeRentalStation.spaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lat, lon, name, code, type, bikes, spaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitBikeRentalStation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    bikes: ").append(toIndentedString(bikes)).append("\n");
    sb.append("    spaces: ").append(toIndentedString(spaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("type");
    openapiFields.add("bikes");
    openapiFields.add("spaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitBikeRentalStation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitBikeRentalStation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitBikeRentalStation is not found in the empty JSON string", TransitBikeRentalStation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitBikeRentalStation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitBikeRentalStation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitBikeRentalStation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitBikeRentalStation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitBikeRentalStation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitBikeRentalStation.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitBikeRentalStation>() {
           @Override
           public void write(JsonWriter out, TransitBikeRentalStation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitBikeRentalStation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitBikeRentalStation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitBikeRentalStation
   * @throws IOException if the JSON string is invalid with respect to TransitBikeRentalStation
   */
  public static TransitBikeRentalStation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitBikeRentalStation.class);
  }

  /**
   * Convert an instance of TransitBikeRentalStation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

