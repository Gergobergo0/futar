/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.TransitScheduleGroup;
import org.openapitools.client.model.TransitScheduleStopTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A menetrendi adatok irány szerint csoportosítva.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitRouteScheduleForDirection {
  public static final String SERIALIZED_NAME_DIRECTION_ID = "directionId";
  @SerializedName(SERIALIZED_NAME_DIRECTION_ID)
  @javax.annotation.Nullable
  private String directionId;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  @javax.annotation.Nullable
  private Map<String, TransitScheduleGroup> groups = new HashMap<>();

  public static final String SERIALIZED_NAME_STOP_TIMES = "stopTimes";
  @SerializedName(SERIALIZED_NAME_STOP_TIMES)
  @javax.annotation.Nullable
  private List<TransitScheduleStopTime> stopTimes = new ArrayList<>();

  public TransitRouteScheduleForDirection() {
  }

  public TransitRouteScheduleForDirection directionId(@javax.annotation.Nullable String directionId) {
    this.directionId = directionId;
    return this;
  }

  /**
   * Az irány azonosítója.
   * @return directionId
   */
  @javax.annotation.Nullable
  public String getDirectionId() {
    return directionId;
  }

  public void setDirectionId(@javax.annotation.Nullable String directionId) {
    this.directionId = directionId;
  }


  public TransitRouteScheduleForDirection groups(@javax.annotation.Nullable Map<String, TransitScheduleGroup> groups) {
    this.groups = groups;
    return this;
  }

  public TransitRouteScheduleForDirection putGroupsItem(String key, TransitScheduleGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new HashMap<>();
    }
    this.groups.put(key, groupsItem);
    return this;
  }

  /**
   * Célmegálló és a hozzá tartozó menetrendi adatok összerendelése.
   * @return groups
   */
  @javax.annotation.Nullable
  public Map<String, TransitScheduleGroup> getGroups() {
    return groups;
  }

  public void setGroups(@javax.annotation.Nullable Map<String, TransitScheduleGroup> groups) {
    this.groups = groups;
  }


  public TransitRouteScheduleForDirection stopTimes(@javax.annotation.Nullable List<TransitScheduleStopTime> stopTimes) {
    this.stopTimes = stopTimes;
    return this;
  }

  public TransitRouteScheduleForDirection addStopTimesItem(TransitScheduleStopTime stopTimesItem) {
    if (this.stopTimes == null) {
      this.stopTimes = new ArrayList<>();
    }
    this.stopTimes.add(stopTimesItem);
    return this;
  }

  /**
   * Az irányhoz tartozó menetrendi bejegyzések.
   * @return stopTimes
   */
  @javax.annotation.Nullable
  public List<TransitScheduleStopTime> getStopTimes() {
    return stopTimes;
  }

  public void setStopTimes(@javax.annotation.Nullable List<TransitScheduleStopTime> stopTimes) {
    this.stopTimes = stopTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitRouteScheduleForDirection transitRouteScheduleForDirection = (TransitRouteScheduleForDirection) o;
    return Objects.equals(this.directionId, transitRouteScheduleForDirection.directionId) &&
        Objects.equals(this.groups, transitRouteScheduleForDirection.groups) &&
        Objects.equals(this.stopTimes, transitRouteScheduleForDirection.stopTimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directionId, groups, stopTimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitRouteScheduleForDirection {\n");
    sb.append("    directionId: ").append(toIndentedString(directionId)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    stopTimes: ").append(toIndentedString(stopTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directionId");
    openapiFields.add("groups");
    openapiFields.add("stopTimes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitRouteScheduleForDirection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitRouteScheduleForDirection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitRouteScheduleForDirection is not found in the empty JSON string", TransitRouteScheduleForDirection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitRouteScheduleForDirection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitRouteScheduleForDirection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("directionId") != null && !jsonObj.get("directionId").isJsonNull()) && !jsonObj.get("directionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directionId").toString()));
      }
      if (jsonObj.get("stopTimes") != null && !jsonObj.get("stopTimes").isJsonNull()) {
        JsonArray jsonArraystopTimes = jsonObj.getAsJsonArray("stopTimes");
        if (jsonArraystopTimes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stopTimes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stopTimes` to be an array in the JSON string but got `%s`", jsonObj.get("stopTimes").toString()));
          }

          // validate the optional field `stopTimes` (array)
          for (int i = 0; i < jsonArraystopTimes.size(); i++) {
            TransitScheduleStopTime.validateJsonElement(jsonArraystopTimes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitRouteScheduleForDirection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitRouteScheduleForDirection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitRouteScheduleForDirection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitRouteScheduleForDirection.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitRouteScheduleForDirection>() {
           @Override
           public void write(JsonWriter out, TransitRouteScheduleForDirection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitRouteScheduleForDirection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitRouteScheduleForDirection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitRouteScheduleForDirection
   * @throws IOException if the JSON string is invalid with respect to TransitRouteScheduleForDirection
   */
  public static TransitRouteScheduleForDirection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitRouteScheduleForDirection.class);
  }

  /**
   * Convert an instance of TransitRouteScheduleForDirection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

