/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransitCoordinatePoint;
import org.openapitools.client.model.TransitVehicleOccupancy;
import org.openapitools.client.model.TransitVehicleStyle;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A lekért adatok listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitVehicle {
  public static final String SERIALIZED_NAME_VEHICLE_ID = "vehicleId";
  @SerializedName(SERIALIZED_NAME_VEHICLE_ID)
  @javax.annotation.Nullable
  private String vehicleId;

  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  @javax.annotation.Nullable
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_SEQUENCE = "stopSequence";
  @SerializedName(SERIALIZED_NAME_STOP_SEQUENCE)
  @javax.annotation.Nullable
  private Integer stopSequence;

  public static final String SERIALIZED_NAME_ROUTE_ID = "routeId";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  @javax.annotation.Nullable
  private String routeId;

  public static final String SERIALIZED_NAME_BEARING = "bearing";
  @SerializedName(SERIALIZED_NAME_BEARING)
  @javax.annotation.Nullable
  private Float bearing;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private TransitCoordinatePoint location;

  public static final String SERIALIZED_NAME_SERVICE_DATE = "serviceDate";
  @SerializedName(SERIALIZED_NAME_SERVICE_DATE)
  @javax.annotation.Nullable
  private String serviceDate;

  public static final String SERIALIZED_NAME_LICENSE_PLATE = "licensePlate";
  @SerializedName(SERIALIZED_NAME_LICENSE_PLATE)
  @javax.annotation.Nullable
  private String licensePlate;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  @javax.annotation.Nullable
  private String model;

  public static final String SERIALIZED_NAME_DEVIATED = "deviated";
  @SerializedName(SERIALIZED_NAME_DEVIATED)
  @javax.annotation.Nullable
  private Boolean deviated;

  public static final String SERIALIZED_NAME_STALE = "stale";
  @SerializedName(SERIALIZED_NAME_STALE)
  @javax.annotation.Nullable
  private Boolean stale;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  @javax.annotation.Nullable
  private Long lastUpdateTime;

  /**
   * A jármű állapota.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INCOMING_AT("INCOMING_AT"),
    
    STOPPED_AT("STOPPED_AT"),
    
    IN_TRANSIT_TO("IN_TRANSIT_TO");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  /**
   * A járműhöz tartozó torlódási állapot.
   */
  @JsonAdapter(CongestionLevelEnum.Adapter.class)
  public enum CongestionLevelEnum {
    UNKNOWN("UNKNOWN"),
    
    CONGESTION("CONGESTION");

    private String value;

    CongestionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CongestionLevelEnum fromValue(String value) {
      for (CongestionLevelEnum b : CongestionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CongestionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CongestionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CongestionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CongestionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CongestionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONGESTION_LEVEL = "congestionLevel";
  @SerializedName(SERIALIZED_NAME_CONGESTION_LEVEL)
  @javax.annotation.Nullable
  private CongestionLevelEnum congestionLevel;

  /**
   * A jármű fajtája. Deprecated: használjuk a &#x60;style&#x60; attribútumot.
   */
  @JsonAdapter(VehicleRouteTypeEnum.Adapter.class)
  public enum VehicleRouteTypeEnum {
    WALK("WALK"),
    
    BICYCLE("BICYCLE"),
    
    CAR("CAR"),
    
    TRAM("TRAM"),
    
    SUBWAY("SUBWAY"),
    
    SUBURBAN_RAILWAY("SUBURBAN_RAILWAY"),
    
    RAIL("RAIL"),
    
    COACH("COACH"),
    
    BUS("BUS"),
    
    TROLLEYBUS("TROLLEYBUS"),
    
    FERRY("FERRY"),
    
    CABLE_CAR("CABLE_CAR"),
    
    GONDOLA("GONDOLA"),
    
    FUNICULAR("FUNICULAR"),
    
    TRANSIT("TRANSIT"),
    
    TRAINISH("TRAINISH"),
    
    BUSISH("BUSISH"),
    
    LEG_SWITCH("LEG_SWITCH"),
    
    CUSTOM_MOTOR_VEHICLE("CUSTOM_MOTOR_VEHICLE");

    private String value;

    VehicleRouteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VehicleRouteTypeEnum fromValue(String value) {
      for (VehicleRouteTypeEnum b : VehicleRouteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VehicleRouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleRouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleRouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VehicleRouteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VehicleRouteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VEHICLE_ROUTE_TYPE = "vehicleRouteType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VEHICLE_ROUTE_TYPE)
  @javax.annotation.Nullable
  private VehicleRouteTypeEnum vehicleRouteType;

  public static final String SERIALIZED_NAME_STOP_DISTANCE_PERCENT = "stopDistancePercent";
  @SerializedName(SERIALIZED_NAME_STOP_DISTANCE_PERCENT)
  @javax.annotation.Nullable
  private Integer stopDistancePercent;

  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE = "wheelchairAccessible";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE)
  @javax.annotation.Nullable
  private Boolean wheelchairAccessible;

  public static final String SERIALIZED_NAME_OCCUPANCY = "occupancy";
  @SerializedName(SERIALIZED_NAME_OCCUPANCY)
  @javax.annotation.Nullable
  private TransitVehicleOccupancy occupancy;

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  @javax.annotation.Nullable
  private TransitVehicleOccupancy capacity;

  public static final String SERIALIZED_NAME_TRIP_ID = "tripId";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  @javax.annotation.Nullable
  private String tripId;

  public static final String SERIALIZED_NAME_VERTEX = "vertex";
  @SerializedName(SERIALIZED_NAME_VERTEX)
  @javax.annotation.Nullable
  private String vertex;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  @javax.annotation.Nullable
  private TransitVehicleStyle style;

  public TransitVehicle() {
  }

  public TransitVehicle vehicleId(@javax.annotation.Nullable String vehicleId) {
    this.vehicleId = vehicleId;
    return this;
  }

  /**
   * A jármű azonosítója.
   * @return vehicleId
   */
  @javax.annotation.Nullable
  public String getVehicleId() {
    return vehicleId;
  }

  public void setVehicleId(@javax.annotation.Nullable String vehicleId) {
    this.vehicleId = vehicleId;
  }


  public TransitVehicle stopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * A járműhöz tartozó megálló azonosítója.
   * @return stopId
   */
  @javax.annotation.Nullable
  public String getStopId() {
    return stopId;
  }

  public void setStopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
  }


  public TransitVehicle stopSequence(@javax.annotation.Nullable Integer stopSequence) {
    this.stopSequence = stopSequence;
    return this;
  }

  /**
   * A jármű által érintett aktuális megálló sorszáma a meneten.
   * @return stopSequence
   */
  @javax.annotation.Nullable
  public Integer getStopSequence() {
    return stopSequence;
  }

  public void setStopSequence(@javax.annotation.Nullable Integer stopSequence) {
    this.stopSequence = stopSequence;
  }


  public TransitVehicle routeId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * A menethez tartozó járat azonosítója, amit a jármű teljesít.
   * @return routeId
   */
  @javax.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
  }


  public TransitVehicle bearing(@javax.annotation.Nullable Float bearing) {
    this.bearing = bearing;
    return this;
  }

  /**
   * A jármű irányszöge.
   * @return bearing
   */
  @javax.annotation.Nullable
  public Float getBearing() {
    return bearing;
  }

  public void setBearing(@javax.annotation.Nullable Float bearing) {
    this.bearing = bearing;
  }


  public TransitVehicle location(@javax.annotation.Nullable TransitCoordinatePoint location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public TransitCoordinatePoint getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable TransitCoordinatePoint location) {
    this.location = location;
  }


  public TransitVehicle serviceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
    return this;
  }

  /**
   * A jármű által teljesített menet menetrendi napja.
   * @return serviceDate
   */
  @javax.annotation.Nullable
  public String getServiceDate() {
    return serviceDate;
  }

  public void setServiceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
  }


  public TransitVehicle licensePlate(@javax.annotation.Nullable String licensePlate) {
    this.licensePlate = licensePlate;
    return this;
  }

  /**
   * A jármű rendszáma.
   * @return licensePlate
   */
  @javax.annotation.Nullable
  public String getLicensePlate() {
    return licensePlate;
  }

  public void setLicensePlate(@javax.annotation.Nullable String licensePlate) {
    this.licensePlate = licensePlate;
  }


  public TransitVehicle label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * A jármű kijelzőjén megjelenő célállomáskép.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public TransitVehicle model(@javax.annotation.Nullable String model) {
    this.model = model;
    return this;
  }

  /**
   * A jármű típusa.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(@javax.annotation.Nullable String model) {
    this.model = model;
  }


  public TransitVehicle deviated(@javax.annotation.Nullable Boolean deviated) {
    this.deviated = deviated;
    return this;
  }

  /**
   * Igaz, ha a jármű letért az útvonaláról.
   * @return deviated
   */
  @javax.annotation.Nullable
  public Boolean getDeviated() {
    return deviated;
  }

  public void setDeviated(@javax.annotation.Nullable Boolean deviated) {
    this.deviated = deviated;
  }


  public TransitVehicle stale(@javax.annotation.Nullable Boolean stale) {
    this.stale = stale;
    return this;
  }

  /**
   * Igaz, ha a jármű pozíciója kiöregedett.
   * @return stale
   */
  @javax.annotation.Nullable
  public Boolean getStale() {
    return stale;
  }

  public void setStale(@javax.annotation.Nullable Boolean stale) {
    this.stale = stale;
  }


  public TransitVehicle lastUpdateTime(@javax.annotation.Nullable Long lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * A járműhöz tartozó utolsó valós idejű adat időbélyege másodpercben.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public Long getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(@javax.annotation.Nullable Long lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public TransitVehicle status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * A jármű állapota.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public TransitVehicle congestionLevel(@javax.annotation.Nullable CongestionLevelEnum congestionLevel) {
    this.congestionLevel = congestionLevel;
    return this;
  }

  /**
   * A járműhöz tartozó torlódási állapot.
   * @return congestionLevel
   */
  @javax.annotation.Nullable
  public CongestionLevelEnum getCongestionLevel() {
    return congestionLevel;
  }

  public void setCongestionLevel(@javax.annotation.Nullable CongestionLevelEnum congestionLevel) {
    this.congestionLevel = congestionLevel;
  }


  @Deprecated
  public TransitVehicle vehicleRouteType(@javax.annotation.Nullable VehicleRouteTypeEnum vehicleRouteType) {
    this.vehicleRouteType = vehicleRouteType;
    return this;
  }

  /**
   * A jármű fajtája. Deprecated: használjuk a &#x60;style&#x60; attribútumot.
   * @return vehicleRouteType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public VehicleRouteTypeEnum getVehicleRouteType() {
    return vehicleRouteType;
  }

  @Deprecated
  public void setVehicleRouteType(@javax.annotation.Nullable VehicleRouteTypeEnum vehicleRouteType) {
    this.vehicleRouteType = vehicleRouteType;
  }


  public TransitVehicle stopDistancePercent(@javax.annotation.Nullable Integer stopDistancePercent) {
    this.stopDistancePercent = stopDistancePercent;
    return this;
  }

  /**
   * Hol tart a jármű a két megálló közti szakaszon, százalékban.
   * @return stopDistancePercent
   */
  @javax.annotation.Nullable
  public Integer getStopDistancePercent() {
    return stopDistancePercent;
  }

  public void setStopDistancePercent(@javax.annotation.Nullable Integer stopDistancePercent) {
    this.stopDistancePercent = stopDistancePercent;
  }


  public TransitVehicle wheelchairAccessible(@javax.annotation.Nullable Boolean wheelchairAccessible) {
    this.wheelchairAccessible = wheelchairAccessible;
    return this;
  }

  /**
   * Igaz, ha a jármű alacsonypadlós.
   * @return wheelchairAccessible
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessible() {
    return wheelchairAccessible;
  }

  public void setWheelchairAccessible(@javax.annotation.Nullable Boolean wheelchairAccessible) {
    this.wheelchairAccessible = wheelchairAccessible;
  }


  public TransitVehicle occupancy(@javax.annotation.Nullable TransitVehicleOccupancy occupancy) {
    this.occupancy = occupancy;
    return this;
  }

  /**
   * Get occupancy
   * @return occupancy
   */
  @javax.annotation.Nullable
  public TransitVehicleOccupancy getOccupancy() {
    return occupancy;
  }

  public void setOccupancy(@javax.annotation.Nullable TransitVehicleOccupancy occupancy) {
    this.occupancy = occupancy;
  }


  public TransitVehicle capacity(@javax.annotation.Nullable TransitVehicleOccupancy capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Get capacity
   * @return capacity
   */
  @javax.annotation.Nullable
  public TransitVehicleOccupancy getCapacity() {
    return capacity;
  }

  public void setCapacity(@javax.annotation.Nullable TransitVehicleOccupancy capacity) {
    this.capacity = capacity;
  }


  public TransitVehicle tripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
    return this;
  }

  /**
   * A járműhöz tartozó menet azonosítója.
   * @return tripId
   */
  @javax.annotation.Nullable
  public String getTripId() {
    return tripId;
  }

  public void setTripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
  }


  public TransitVehicle vertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
    return this;
  }

  /**
   * A menet utazástervező azonosítója, amelyet a &#x60;fromPlace&#x60; megadásához lehet használni.
   * @return vertex
   */
  @javax.annotation.Nullable
  public String getVertex() {
    return vertex;
  }

  public void setVertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
  }


  public TransitVehicle style(@javax.annotation.Nullable TransitVehicleStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public TransitVehicleStyle getStyle() {
    return style;
  }

  public void setStyle(@javax.annotation.Nullable TransitVehicleStyle style) {
    this.style = style;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitVehicle transitVehicle = (TransitVehicle) o;
    return Objects.equals(this.vehicleId, transitVehicle.vehicleId) &&
        Objects.equals(this.stopId, transitVehicle.stopId) &&
        Objects.equals(this.stopSequence, transitVehicle.stopSequence) &&
        Objects.equals(this.routeId, transitVehicle.routeId) &&
        Objects.equals(this.bearing, transitVehicle.bearing) &&
        Objects.equals(this.location, transitVehicle.location) &&
        Objects.equals(this.serviceDate, transitVehicle.serviceDate) &&
        Objects.equals(this.licensePlate, transitVehicle.licensePlate) &&
        Objects.equals(this.label, transitVehicle.label) &&
        Objects.equals(this.model, transitVehicle.model) &&
        Objects.equals(this.deviated, transitVehicle.deviated) &&
        Objects.equals(this.stale, transitVehicle.stale) &&
        Objects.equals(this.lastUpdateTime, transitVehicle.lastUpdateTime) &&
        Objects.equals(this.status, transitVehicle.status) &&
        Objects.equals(this.congestionLevel, transitVehicle.congestionLevel) &&
        Objects.equals(this.vehicleRouteType, transitVehicle.vehicleRouteType) &&
        Objects.equals(this.stopDistancePercent, transitVehicle.stopDistancePercent) &&
        Objects.equals(this.wheelchairAccessible, transitVehicle.wheelchairAccessible) &&
        Objects.equals(this.occupancy, transitVehicle.occupancy) &&
        Objects.equals(this.capacity, transitVehicle.capacity) &&
        Objects.equals(this.tripId, transitVehicle.tripId) &&
        Objects.equals(this.vertex, transitVehicle.vertex) &&
        Objects.equals(this.style, transitVehicle.style);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(vehicleId, stopId, stopSequence, routeId, bearing, location, serviceDate, licensePlate, label, model, deviated, stale, lastUpdateTime, status, congestionLevel, vehicleRouteType, stopDistancePercent, wheelchairAccessible, occupancy, capacity, tripId, vertex, style);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitVehicle {\n");
    sb.append("    vehicleId: ").append(toIndentedString(vehicleId)).append("\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopSequence: ").append(toIndentedString(stopSequence)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    bearing: ").append(toIndentedString(bearing)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    serviceDate: ").append(toIndentedString(serviceDate)).append("\n");
    sb.append("    licensePlate: ").append(toIndentedString(licensePlate)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    deviated: ").append(toIndentedString(deviated)).append("\n");
    sb.append("    stale: ").append(toIndentedString(stale)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    congestionLevel: ").append(toIndentedString(congestionLevel)).append("\n");
    sb.append("    vehicleRouteType: ").append(toIndentedString(vehicleRouteType)).append("\n");
    sb.append("    stopDistancePercent: ").append(toIndentedString(stopDistancePercent)).append("\n");
    sb.append("    wheelchairAccessible: ").append(toIndentedString(wheelchairAccessible)).append("\n");
    sb.append("    occupancy: ").append(toIndentedString(occupancy)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("    vertex: ").append(toIndentedString(vertex)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vehicleId");
    openapiFields.add("stopId");
    openapiFields.add("stopSequence");
    openapiFields.add("routeId");
    openapiFields.add("bearing");
    openapiFields.add("location");
    openapiFields.add("serviceDate");
    openapiFields.add("licensePlate");
    openapiFields.add("label");
    openapiFields.add("model");
    openapiFields.add("deviated");
    openapiFields.add("stale");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("status");
    openapiFields.add("congestionLevel");
    openapiFields.add("vehicleRouteType");
    openapiFields.add("stopDistancePercent");
    openapiFields.add("wheelchairAccessible");
    openapiFields.add("occupancy");
    openapiFields.add("capacity");
    openapiFields.add("tripId");
    openapiFields.add("vertex");
    openapiFields.add("style");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitVehicle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitVehicle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitVehicle is not found in the empty JSON string", TransitVehicle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitVehicle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitVehicle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("vehicleId") != null && !jsonObj.get("vehicleId").isJsonNull()) && !jsonObj.get("vehicleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleId").toString()));
      }
      if ((jsonObj.get("stopId") != null && !jsonObj.get("stopId").isJsonNull()) && !jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if ((jsonObj.get("routeId") != null && !jsonObj.get("routeId").isJsonNull()) && !jsonObj.get("routeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeId").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        TransitCoordinatePoint.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("serviceDate") != null && !jsonObj.get("serviceDate").isJsonNull()) && !jsonObj.get("serviceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDate").toString()));
      }
      if ((jsonObj.get("licensePlate") != null && !jsonObj.get("licensePlate").isJsonNull()) && !jsonObj.get("licensePlate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licensePlate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licensePlate").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("congestionLevel") != null && !jsonObj.get("congestionLevel").isJsonNull()) && !jsonObj.get("congestionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `congestionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("congestionLevel").toString()));
      }
      // validate the optional field `congestionLevel`
      if (jsonObj.get("congestionLevel") != null && !jsonObj.get("congestionLevel").isJsonNull()) {
        CongestionLevelEnum.validateJsonElement(jsonObj.get("congestionLevel"));
      }
      if ((jsonObj.get("vehicleRouteType") != null && !jsonObj.get("vehicleRouteType").isJsonNull()) && !jsonObj.get("vehicleRouteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleRouteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleRouteType").toString()));
      }
      // validate the optional field `vehicleRouteType`
      if (jsonObj.get("vehicleRouteType") != null && !jsonObj.get("vehicleRouteType").isJsonNull()) {
        VehicleRouteTypeEnum.validateJsonElement(jsonObj.get("vehicleRouteType"));
      }
      // validate the optional field `occupancy`
      if (jsonObj.get("occupancy") != null && !jsonObj.get("occupancy").isJsonNull()) {
        TransitVehicleOccupancy.validateJsonElement(jsonObj.get("occupancy"));
      }
      // validate the optional field `capacity`
      if (jsonObj.get("capacity") != null && !jsonObj.get("capacity").isJsonNull()) {
        TransitVehicleOccupancy.validateJsonElement(jsonObj.get("capacity"));
      }
      if ((jsonObj.get("tripId") != null && !jsonObj.get("tripId").isJsonNull()) && !jsonObj.get("tripId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripId").toString()));
      }
      if ((jsonObj.get("vertex") != null && !jsonObj.get("vertex").isJsonNull()) && !jsonObj.get("vertex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertex").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        TransitVehicleStyle.validateJsonElement(jsonObj.get("style"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitVehicle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitVehicle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitVehicle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitVehicle.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitVehicle>() {
           @Override
           public void write(JsonWriter out, TransitVehicle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitVehicle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitVehicle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitVehicle
   * @throws IOException if the JSON string is invalid with respect to TransitVehicle
   */
  public static TransitVehicle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitVehicle.class);
  }

  /**
   * Convert an instance of TransitVehicle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

