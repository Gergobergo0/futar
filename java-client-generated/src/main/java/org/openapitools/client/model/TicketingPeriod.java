/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A jegyértékesítési hely nyitvatartása.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TicketingPeriod {
  /**
   * A nyitvatartási idő napja. Lehet HOL (ünnepnap) és 0247 (éjjel-nappali).
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
  public enum DayOfWeekEnum {
    MON("MON"),
    
    TUE("TUE"),
    
    WED("WED"),
    
    THU("THU"),
    
    FRI("FRI"),
    
    SAT("SAT"),
    
    SUN("SUN"),
    
    HOL("HOL"),
    
    O247("O247");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  @javax.annotation.Nullable
  private DayOfWeekEnum dayOfWeek;

  public static final String SERIALIZED_NAME_OPENS = "opens";
  @SerializedName(SERIALIZED_NAME_OPENS)
  @javax.annotation.Nullable
  private String opens;

  public static final String SERIALIZED_NAME_CLOSES = "closes";
  @SerializedName(SERIALIZED_NAME_CLOSES)
  @javax.annotation.Nullable
  private String closes;

  public static final String SERIALIZED_NAME_OPENS_SECONDS = "opensSeconds";
  @SerializedName(SERIALIZED_NAME_OPENS_SECONDS)
  @javax.annotation.Nullable
  private Integer opensSeconds;

  public static final String SERIALIZED_NAME_CLOSES_SECONDS = "closesSeconds";
  @SerializedName(SERIALIZED_NAME_CLOSES_SECONDS)
  @javax.annotation.Nullable
  private Integer closesSeconds;

  public TicketingPeriod() {
  }

  public TicketingPeriod dayOfWeek(@javax.annotation.Nullable DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * A nyitvatartási idő napja. Lehet HOL (ünnepnap) és 0247 (éjjel-nappali).
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(@javax.annotation.Nullable DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public TicketingPeriod opens(@javax.annotation.Nullable String opens) {
    this.opens = opens;
    return this;
  }

  /**
   * Nyitási idő HH:mm formátumban.
   * @return opens
   */
  @javax.annotation.Nullable
  public String getOpens() {
    return opens;
  }

  public void setOpens(@javax.annotation.Nullable String opens) {
    this.opens = opens;
  }


  public TicketingPeriod closes(@javax.annotation.Nullable String closes) {
    this.closes = closes;
    return this;
  }

  /**
   * Zárási idő HH:mm formátumban.
   * @return closes
   */
  @javax.annotation.Nullable
  public String getCloses() {
    return closes;
  }

  public void setCloses(@javax.annotation.Nullable String closes) {
    this.closes = closes;
  }


  public TicketingPeriod opensSeconds(@javax.annotation.Nullable Integer opensSeconds) {
    this.opensSeconds = opensSeconds;
    return this;
  }

  /**
   * Nyitási idő másodpercben.
   * @return opensSeconds
   */
  @javax.annotation.Nullable
  public Integer getOpensSeconds() {
    return opensSeconds;
  }

  public void setOpensSeconds(@javax.annotation.Nullable Integer opensSeconds) {
    this.opensSeconds = opensSeconds;
  }


  public TicketingPeriod closesSeconds(@javax.annotation.Nullable Integer closesSeconds) {
    this.closesSeconds = closesSeconds;
    return this;
  }

  /**
   * Zárási idő másodpercben.
   * @return closesSeconds
   */
  @javax.annotation.Nullable
  public Integer getClosesSeconds() {
    return closesSeconds;
  }

  public void setClosesSeconds(@javax.annotation.Nullable Integer closesSeconds) {
    this.closesSeconds = closesSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketingPeriod ticketingPeriod = (TicketingPeriod) o;
    return Objects.equals(this.dayOfWeek, ticketingPeriod.dayOfWeek) &&
        Objects.equals(this.opens, ticketingPeriod.opens) &&
        Objects.equals(this.closes, ticketingPeriod.closes) &&
        Objects.equals(this.opensSeconds, ticketingPeriod.opensSeconds) &&
        Objects.equals(this.closesSeconds, ticketingPeriod.closesSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfWeek, opens, closes, opensSeconds, closesSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketingPeriod {\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    closes: ").append(toIndentedString(closes)).append("\n");
    sb.append("    opensSeconds: ").append(toIndentedString(opensSeconds)).append("\n");
    sb.append("    closesSeconds: ").append(toIndentedString(closesSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfWeek");
    openapiFields.add("opens");
    openapiFields.add("closes");
    openapiFields.add("opensSeconds");
    openapiFields.add("closesSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TicketingPeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TicketingPeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TicketingPeriod is not found in the empty JSON string", TicketingPeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TicketingPeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TicketingPeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) && !jsonObj.get("dayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
      // validate the optional field `dayOfWeek`
      if (jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) {
        DayOfWeekEnum.validateJsonElement(jsonObj.get("dayOfWeek"));
      }
      if ((jsonObj.get("opens") != null && !jsonObj.get("opens").isJsonNull()) && !jsonObj.get("opens").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opens` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opens").toString()));
      }
      if ((jsonObj.get("closes") != null && !jsonObj.get("closes").isJsonNull()) && !jsonObj.get("closes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TicketingPeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TicketingPeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TicketingPeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TicketingPeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<TicketingPeriod>() {
           @Override
           public void write(JsonWriter out, TicketingPeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TicketingPeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TicketingPeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TicketingPeriod
   * @throws IOException if the JSON string is invalid with respect to TicketingPeriod
   */
  public static TicketingPeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TicketingPeriod.class);
  }

  /**
   * Convert an instance of TicketingPeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

