/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Itinerary;
import org.openapitools.client.model.Place;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A tervezett útvonalak.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TripPlan {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private Long date;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private Place from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nullable
  private Place to;

  public static final String SERIALIZED_NAME_ITINERARIES = "itineraries";
  @SerializedName(SERIALIZED_NAME_ITINERARIES)
  @javax.annotation.Nullable
  private List<Itinerary> itineraries = new ArrayList<>();

  public TripPlan() {
  }

  public TripPlan date(@javax.annotation.Nullable Long date) {
    this.date = date;
    return this;
  }

  /**
   * Az útvonal kezdete ezredmásodpercben.
   * @return date
   */
  @javax.annotation.Nullable
  public Long getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable Long date) {
    this.date = date;
  }


  public TripPlan from(@javax.annotation.Nullable Place from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public Place getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable Place from) {
    this.from = from;
  }


  public TripPlan to(@javax.annotation.Nullable Place to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public Place getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nullable Place to) {
    this.to = to;
  }


  public TripPlan itineraries(@javax.annotation.Nullable List<Itinerary> itineraries) {
    this.itineraries = itineraries;
    return this;
  }

  public TripPlan addItinerariesItem(Itinerary itinerariesItem) {
    if (this.itineraries == null) {
      this.itineraries = new ArrayList<>();
    }
    this.itineraries.add(itinerariesItem);
    return this;
  }

  /**
   * A talált útvonalak listája.
   * @return itineraries
   */
  @javax.annotation.Nullable
  public List<Itinerary> getItineraries() {
    return itineraries;
  }

  public void setItineraries(@javax.annotation.Nullable List<Itinerary> itineraries) {
    this.itineraries = itineraries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TripPlan tripPlan = (TripPlan) o;
    return Objects.equals(this.date, tripPlan.date) &&
        Objects.equals(this.from, tripPlan.from) &&
        Objects.equals(this.to, tripPlan.to) &&
        Objects.equals(this.itineraries, tripPlan.itineraries);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, from, to, itineraries);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TripPlan {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    itineraries: ").append(toIndentedString(itineraries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("itineraries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TripPlan
   */

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    /*
      if (jsonElement == null) {
        if (!TripPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TripPlan is not found in the empty JSON string", TripPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TripPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TripPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        Place.validateJsonElement(jsonObj.get("from"));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        Place.validateJsonElement(jsonObj.get("to"));
      }
      if (jsonObj.get("itineraries") != null && !jsonObj.get("itineraries").isJsonNull()) {
        JsonArray jsonArrayitineraries = jsonObj.getAsJsonArray("itineraries");
        if (jsonArrayitineraries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itineraries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itineraries` to be an array in the JSON string but got `%s`", jsonObj.get("itineraries").toString()));
          }

          // validate the optional field `itineraries` (array)
          for (int i = 0; i < jsonArrayitineraries.size(); i++) {
            Itinerary.validateJsonElement(jsonArrayitineraries.get(i));
          };
        }
      }*/
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TripPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TripPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TripPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TripPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<TripPlan>() {
           @Override
           public void write(JsonWriter out, TripPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TripPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TripPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TripPlan
   * @throws IOException if the JSON string is invalid with respect to TripPlan
   */
  public static TripPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TripPlan.class);
  }

  /**
   * Convert an instance of TripPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

