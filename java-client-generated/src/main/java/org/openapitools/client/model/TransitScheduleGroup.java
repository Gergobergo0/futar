/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Célmegálló és a hozzá tartozó menetrendi adatok összerendelése.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitScheduleGroup {
  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  @javax.annotation.Nullable
  private String groupId;

  public static final String SERIALIZED_NAME_HEADSIGN = "headsign";
  @SerializedName(SERIALIZED_NAME_HEADSIGN)
  @javax.annotation.Nullable
  private String headsign;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public TransitScheduleGroup() {
  }

  public TransitScheduleGroup groupId(@javax.annotation.Nullable String groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * A menetrendi csoport azonosítója.
   * @return groupId
   */
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(@javax.annotation.Nullable String groupId) {
    this.groupId = groupId;
  }


  public TransitScheduleGroup headsign(@javax.annotation.Nullable String headsign) {
    this.headsign = headsign;
    return this;
  }

  /**
   * A menetrendi csoport célállomása.
   * @return headsign
   */
  @javax.annotation.Nullable
  public String getHeadsign() {
    return headsign;
  }

  public void setHeadsign(@javax.annotation.Nullable String headsign) {
    this.headsign = headsign;
  }


  public TransitScheduleGroup description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A menetrendi csoport leírása.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitScheduleGroup transitScheduleGroup = (TransitScheduleGroup) o;
    return Objects.equals(this.groupId, transitScheduleGroup.groupId) &&
        Objects.equals(this.headsign, transitScheduleGroup.headsign) &&
        Objects.equals(this.description, transitScheduleGroup.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, headsign, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitScheduleGroup {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    headsign: ").append(toIndentedString(headsign)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupId");
    openapiFields.add("headsign");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitScheduleGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitScheduleGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitScheduleGroup is not found in the empty JSON string", TransitScheduleGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitScheduleGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitScheduleGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) && !jsonObj.get("groupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
      }
      if ((jsonObj.get("headsign") != null && !jsonObj.get("headsign").isJsonNull()) && !jsonObj.get("headsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headsign").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitScheduleGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitScheduleGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitScheduleGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitScheduleGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitScheduleGroup>() {
           @Override
           public void write(JsonWriter out, TransitScheduleGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitScheduleGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitScheduleGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitScheduleGroup
   * @throws IOException if the JSON string is invalid with respect to TransitScheduleGroup
   */
  public static TransitScheduleGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitScheduleGroup.class);
  }

  /**
   * Convert an instance of TransitScheduleGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

