/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransitRouteSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A lekért adat.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitSchedule {
  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  @javax.annotation.Nullable
  private String stopId;

  public static final String SERIALIZED_NAME_SERVICE_DATE = "serviceDate";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SERVICE_DATE)
  @javax.annotation.Nullable
  private String serviceDate;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private LocalDate date;

  public static final String SERIALIZED_NAME_ROUTE_IDS = "routeIds";
  @SerializedName(SERIALIZED_NAME_ROUTE_IDS)
  @javax.annotation.Nullable
  private List<String> routeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEARBY_STOP_IDS = "nearbyStopIds";
  @SerializedName(SERIALIZED_NAME_NEARBY_STOP_IDS)
  @javax.annotation.Nullable
  private List<String> nearbyStopIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_IDS = "alertIds";
  @SerializedName(SERIALIZED_NAME_ALERT_IDS)
  @javax.annotation.Nullable
  private List<String> alertIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  @javax.annotation.Nullable
  private List<TransitRouteSchedule> schedules = new ArrayList<>();

  public TransitSchedule() {
  }

  public TransitSchedule stopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * A menetrend megállójának azonosítója.
   * @return stopId
   */
  @javax.annotation.Nullable
  public String getStopId() {
    return stopId;
  }

  public void setStopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
  }


  @Deprecated
  public TransitSchedule serviceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
    return this;
  }

  /**
   * A menetrendhez tartozó dátum.
   * @return serviceDate
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getServiceDate() {
    return serviceDate;
  }

  @Deprecated
  public void setServiceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
  }


  public TransitSchedule date(@javax.annotation.Nullable LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * A menetrendhez tartozó dátum.
   * @return date
   */
  @javax.annotation.Nullable
  public LocalDate getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable LocalDate date) {
    this.date = date;
  }


  public TransitSchedule routeIds(@javax.annotation.Nullable List<String> routeIds) {
    this.routeIds = routeIds;
    return this;
  }

  public TransitSchedule addRouteIdsItem(String routeIdsItem) {
    if (this.routeIds == null) {
      this.routeIds = new ArrayList<>();
    }
    this.routeIds.add(routeIdsItem);
    return this;
  }

  /**
   * A menetrendhez tartozó járatok azonosítói.
   * @return routeIds
   */
  @javax.annotation.Nullable
  public List<String> getRouteIds() {
    return routeIds;
  }

  public void setRouteIds(@javax.annotation.Nullable List<String> routeIds) {
    this.routeIds = routeIds;
  }


  public TransitSchedule nearbyStopIds(@javax.annotation.Nullable List<String> nearbyStopIds) {
    this.nearbyStopIds = nearbyStopIds;
    return this;
  }

  public TransitSchedule addNearbyStopIdsItem(String nearbyStopIdsItem) {
    if (this.nearbyStopIds == null) {
      this.nearbyStopIds = new ArrayList<>();
    }
    this.nearbyStopIds.add(nearbyStopIdsItem);
    return this;
  }

  /**
   * A közeli megállók azonosítói.
   * @return nearbyStopIds
   */
  @javax.annotation.Nullable
  public List<String> getNearbyStopIds() {
    return nearbyStopIds;
  }

  public void setNearbyStopIds(@javax.annotation.Nullable List<String> nearbyStopIds) {
    this.nearbyStopIds = nearbyStopIds;
  }


  public TransitSchedule alertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
    return this;
  }

  public TransitSchedule addAlertIdsItem(String alertIdsItem) {
    if (this.alertIds == null) {
      this.alertIds = new ArrayList<>();
    }
    this.alertIds.add(alertIdsItem);
    return this;
  }

  /**
   * A megállóhoz tartozó aktív zavarok azonosítói.
   * @return alertIds
   */
  @javax.annotation.Nullable
  public List<String> getAlertIds() {
    return alertIds;
  }

  public void setAlertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
  }


  public TransitSchedule schedules(@javax.annotation.Nullable List<TransitRouteSchedule> schedules) {
    this.schedules = schedules;
    return this;
  }

  public TransitSchedule addSchedulesItem(TransitRouteSchedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * A megállóhoz tartozó menetrend.
   * @return schedules
   */
  @javax.annotation.Nullable
  public List<TransitRouteSchedule> getSchedules() {
    return schedules;
  }

  public void setSchedules(@javax.annotation.Nullable List<TransitRouteSchedule> schedules) {
    this.schedules = schedules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitSchedule transitSchedule = (TransitSchedule) o;
    return Objects.equals(this.stopId, transitSchedule.stopId) &&
        Objects.equals(this.serviceDate, transitSchedule.serviceDate) &&
        Objects.equals(this.date, transitSchedule.date) &&
        Objects.equals(this.routeIds, transitSchedule.routeIds) &&
        Objects.equals(this.nearbyStopIds, transitSchedule.nearbyStopIds) &&
        Objects.equals(this.alertIds, transitSchedule.alertIds) &&
        Objects.equals(this.schedules, transitSchedule.schedules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stopId, serviceDate, date, routeIds, nearbyStopIds, alertIds, schedules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitSchedule {\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    serviceDate: ").append(toIndentedString(serviceDate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    routeIds: ").append(toIndentedString(routeIds)).append("\n");
    sb.append("    nearbyStopIds: ").append(toIndentedString(nearbyStopIds)).append("\n");
    sb.append("    alertIds: ").append(toIndentedString(alertIds)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stopId");
    openapiFields.add("serviceDate");
    openapiFields.add("date");
    openapiFields.add("routeIds");
    openapiFields.add("nearbyStopIds");
    openapiFields.add("alertIds");
    openapiFields.add("schedules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitSchedule is not found in the empty JSON string", TransitSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stopId") != null && !jsonObj.get("stopId").isJsonNull()) && !jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if ((jsonObj.get("serviceDate") != null && !jsonObj.get("serviceDate").isJsonNull()) && !jsonObj.get("serviceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("routeIds") != null && !jsonObj.get("routeIds").isJsonNull() && !jsonObj.get("routeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeIds` to be an array in the JSON string but got `%s`", jsonObj.get("routeIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nearbyStopIds") != null && !jsonObj.get("nearbyStopIds").isJsonNull() && !jsonObj.get("nearbyStopIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nearbyStopIds` to be an array in the JSON string but got `%s`", jsonObj.get("nearbyStopIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertIds") != null && !jsonObj.get("alertIds").isJsonNull() && !jsonObj.get("alertIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertIds` to be an array in the JSON string but got `%s`", jsonObj.get("alertIds").toString()));
      }
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull()) {
        JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("schedules");
        if (jsonArrayschedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
          }

          // validate the optional field `schedules` (array)
          for (int i = 0; i < jsonArrayschedules.size(); i++) {
            TransitRouteSchedule.validateJsonElement(jsonArrayschedules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitSchedule>() {
           @Override
           public void write(JsonWriter out, TransitSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitSchedule
   * @throws IOException if the JSON string is invalid with respect to TransitSchedule
   */
  public static TransitSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitSchedule.class);
  }

  /**
   * Convert an instance of TransitSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

