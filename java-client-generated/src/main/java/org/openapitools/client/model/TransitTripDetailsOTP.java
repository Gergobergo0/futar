/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransitPolyline;
import org.openapitools.client.model.TransitTripStopTime;
import org.openapitools.client.model.TransitVehicle;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A lekért adat.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitTripDetailsOTP {
  public static final String SERIALIZED_NAME_TRIP_ID = "tripId";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  @javax.annotation.Nullable
  private String tripId;

  public static final String SERIALIZED_NAME_SERVICE_DATE = "serviceDate";
  @SerializedName(SERIALIZED_NAME_SERVICE_DATE)
  @javax.annotation.Nullable
  private String serviceDate;

  public static final String SERIALIZED_NAME_VERTEX = "vertex";
  @SerializedName(SERIALIZED_NAME_VERTEX)
  @javax.annotation.Nullable
  private String vertex;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  @javax.annotation.Nullable
  private TransitVehicle vehicle;

  public static final String SERIALIZED_NAME_POLYLINE = "polyline";
  @SerializedName(SERIALIZED_NAME_POLYLINE)
  @javax.annotation.Nullable
  private TransitPolyline polyline;

  public static final String SERIALIZED_NAME_ALERT_IDS = "alertIds";
  @SerializedName(SERIALIZED_NAME_ALERT_IDS)
  @javax.annotation.Nullable
  private List<String> alertIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOP_TIMES = "stopTimes";
  @SerializedName(SERIALIZED_NAME_STOP_TIMES)
  @javax.annotation.Nullable
  private List<TransitTripStopTime> stopTimes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_BLOCK_TRIP_ID = "nextBlockTripId";
  @SerializedName(SERIALIZED_NAME_NEXT_BLOCK_TRIP_ID)
  @javax.annotation.Nullable
  private String nextBlockTripId;

  public static final String SERIALIZED_NAME_MAY_REQUIRE_BOOKING = "mayRequireBooking";
  @SerializedName(SERIALIZED_NAME_MAY_REQUIRE_BOOKING)
  @javax.annotation.Nullable
  private Boolean mayRequireBooking;

  public TransitTripDetailsOTP() {
  }

  public TransitTripDetailsOTP tripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
    return this;
  }

  /**
   * A menet azonosítója.
   * @return tripId
   */
  @javax.annotation.Nullable
  public String getTripId() {
    return tripId;
  }

  public void setTripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
  }


  public TransitTripDetailsOTP serviceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
    return this;
  }

  /**
   * A menet menetrendi napja.
   * @return serviceDate
   */
  @javax.annotation.Nullable
  public String getServiceDate() {
    return serviceDate;
  }

  public void setServiceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
  }


  public TransitTripDetailsOTP vertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
    return this;
  }

  /**
   * A menet utazástervező azonosítója, amelyet a &#x60;fromPlace&#x60; megadásához lehet használni.
   * @return vertex
   */
  @javax.annotation.Nullable
  public String getVertex() {
    return vertex;
  }

  public void setVertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
  }


  public TransitTripDetailsOTP vehicle(@javax.annotation.Nullable TransitVehicle vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public TransitVehicle getVehicle() {
    return vehicle;
  }

  public void setVehicle(@javax.annotation.Nullable TransitVehicle vehicle) {
    this.vehicle = vehicle;
  }


  public TransitTripDetailsOTP polyline(@javax.annotation.Nullable TransitPolyline polyline) {
    this.polyline = polyline;
    return this;
  }

  /**
   * Get polyline
   * @return polyline
   */
  @javax.annotation.Nullable
  public TransitPolyline getPolyline() {
    return polyline;
  }

  public void setPolyline(@javax.annotation.Nullable TransitPolyline polyline) {
    this.polyline = polyline;
  }


  public TransitTripDetailsOTP alertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
    return this;
  }

  public TransitTripDetailsOTP addAlertIdsItem(String alertIdsItem) {
    if (this.alertIds == null) {
      this.alertIds = new ArrayList<>();
    }
    this.alertIds.add(alertIdsItem);
    return this;
  }

  /**
   * Aktív zavarok a meneten.
   * @return alertIds
   */
  @javax.annotation.Nullable
  public List<String> getAlertIds() {
    return alertIds;
  }

  public void setAlertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
  }


  public TransitTripDetailsOTP stopTimes(@javax.annotation.Nullable List<TransitTripStopTime> stopTimes) {
    this.stopTimes = stopTimes;
    return this;
  }

  public TransitTripDetailsOTP addStopTimesItem(TransitTripStopTime stopTimesItem) {
    if (this.stopTimes == null) {
      this.stopTimes = new ArrayList<>();
    }
    this.stopTimes.add(stopTimesItem);
    return this;
  }

  /**
   * Menet megállóinak listája.
   * @return stopTimes
   */
  @javax.annotation.Nullable
  public List<TransitTripStopTime> getStopTimes() {
    return stopTimes;
  }

  public void setStopTimes(@javax.annotation.Nullable List<TransitTripStopTime> stopTimes) {
    this.stopTimes = stopTimes;
  }


  public TransitTripDetailsOTP nextBlockTripId(@javax.annotation.Nullable String nextBlockTripId) {
    this.nextBlockTripId = nextBlockTripId;
    return this;
  }

  /**
   * A következő menet azonosítója a csoportban, ha a menet hurokjárat.
   * @return nextBlockTripId
   */
  @javax.annotation.Nullable
  public String getNextBlockTripId() {
    return nextBlockTripId;
  }

  public void setNextBlockTripId(@javax.annotation.Nullable String nextBlockTripId) {
    this.nextBlockTripId = nextBlockTripId;
  }


  public TransitTripDetailsOTP mayRequireBooking(@javax.annotation.Nullable Boolean mayRequireBooking) {
    this.mayRequireBooking = mayRequireBooking;
    return this;
  }

  /**
   * Igaz, ha a menet (legalább egy szakasza) foglalást igényel.
   * @return mayRequireBooking
   */
  @javax.annotation.Nullable
  public Boolean getMayRequireBooking() {
    return mayRequireBooking;
  }

  public void setMayRequireBooking(@javax.annotation.Nullable Boolean mayRequireBooking) {
    this.mayRequireBooking = mayRequireBooking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitTripDetailsOTP transitTripDetailsOTP = (TransitTripDetailsOTP) o;
    return Objects.equals(this.tripId, transitTripDetailsOTP.tripId) &&
        Objects.equals(this.serviceDate, transitTripDetailsOTP.serviceDate) &&
        Objects.equals(this.vertex, transitTripDetailsOTP.vertex) &&
        Objects.equals(this.vehicle, transitTripDetailsOTP.vehicle) &&
        Objects.equals(this.polyline, transitTripDetailsOTP.polyline) &&
        Objects.equals(this.alertIds, transitTripDetailsOTP.alertIds) &&
        Objects.equals(this.stopTimes, transitTripDetailsOTP.stopTimes) &&
        Objects.equals(this.nextBlockTripId, transitTripDetailsOTP.nextBlockTripId) &&
        Objects.equals(this.mayRequireBooking, transitTripDetailsOTP.mayRequireBooking);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tripId, serviceDate, vertex, vehicle, polyline, alertIds, stopTimes, nextBlockTripId, mayRequireBooking);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitTripDetailsOTP {\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("    serviceDate: ").append(toIndentedString(serviceDate)).append("\n");
    sb.append("    vertex: ").append(toIndentedString(vertex)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    polyline: ").append(toIndentedString(polyline)).append("\n");
    sb.append("    alertIds: ").append(toIndentedString(alertIds)).append("\n");
    sb.append("    stopTimes: ").append(toIndentedString(stopTimes)).append("\n");
    sb.append("    nextBlockTripId: ").append(toIndentedString(nextBlockTripId)).append("\n");
    sb.append("    mayRequireBooking: ").append(toIndentedString(mayRequireBooking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tripId");
    openapiFields.add("serviceDate");
    openapiFields.add("vertex");
    openapiFields.add("vehicle");
    openapiFields.add("polyline");
    openapiFields.add("alertIds");
    openapiFields.add("stopTimes");
    openapiFields.add("nextBlockTripId");
    openapiFields.add("mayRequireBooking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitTripDetailsOTP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitTripDetailsOTP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitTripDetailsOTP is not found in the empty JSON string", TransitTripDetailsOTP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitTripDetailsOTP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitTripDetailsOTP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tripId") != null && !jsonObj.get("tripId").isJsonNull()) && !jsonObj.get("tripId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripId").toString()));
      }
      if ((jsonObj.get("serviceDate") != null && !jsonObj.get("serviceDate").isJsonNull()) && !jsonObj.get("serviceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDate").toString()));
      }
      if ((jsonObj.get("vertex") != null && !jsonObj.get("vertex").isJsonNull()) && !jsonObj.get("vertex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertex").toString()));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        TransitVehicle.validateJsonElement(jsonObj.get("vehicle"));
      }
      // validate the optional field `polyline`
      if (jsonObj.get("polyline") != null && !jsonObj.get("polyline").isJsonNull()) {
        TransitPolyline.validateJsonElement(jsonObj.get("polyline"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertIds") != null && !jsonObj.get("alertIds").isJsonNull() && !jsonObj.get("alertIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertIds` to be an array in the JSON string but got `%s`", jsonObj.get("alertIds").toString()));
      }
      if (jsonObj.get("stopTimes") != null && !jsonObj.get("stopTimes").isJsonNull()) {
        JsonArray jsonArraystopTimes = jsonObj.getAsJsonArray("stopTimes");
        if (jsonArraystopTimes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stopTimes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stopTimes` to be an array in the JSON string but got `%s`", jsonObj.get("stopTimes").toString()));
          }

          // validate the optional field `stopTimes` (array)
          for (int i = 0; i < jsonArraystopTimes.size(); i++) {
            TransitTripStopTime.validateJsonElement(jsonArraystopTimes.get(i));
          };
        }
      }
      if ((jsonObj.get("nextBlockTripId") != null && !jsonObj.get("nextBlockTripId").isJsonNull()) && !jsonObj.get("nextBlockTripId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextBlockTripId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextBlockTripId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitTripDetailsOTP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitTripDetailsOTP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitTripDetailsOTP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitTripDetailsOTP.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitTripDetailsOTP>() {
           @Override
           public void write(JsonWriter out, TransitTripDetailsOTP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitTripDetailsOTP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitTripDetailsOTP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitTripDetailsOTP
   * @throws IOException if the JSON string is invalid with respect to TransitTripDetailsOTP
   */
  public static TransitTripDetailsOTP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitTripDetailsOTP.class);
  }

  /**
   * Convert an instance of TransitTripDetailsOTP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

