/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TicketingPeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A jegyértékesítési pontok listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TicketingLocation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  /**
   * A jegyértékesítési hely típusa.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CUSTOMER_CENTER("CUSTOMER_CENTER"),
    
    CASHIER("CASHIER"),
    
    VENDING_MACHINE("VENDING_MACHINE"),
    
    RESELLER("RESELLER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  /**
   * A jegyértékesítési hely állapota.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PLANNED("PLANNED"),
    
    OPERATIONAL("OPERATIONAL"),
    
    INOPERATIVE("INOPERATIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private StateEnum state;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  @javax.annotation.Nullable
  private Boolean visible;

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  @javax.annotation.Nullable
  private String place;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  @javax.annotation.Nullable
  private String operator;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  @javax.annotation.Nullable
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  @javax.annotation.Nullable
  private Double lon;

  public static final String SERIALIZED_NAME_CASH_ACCEPTED = "cashAccepted";
  @SerializedName(SERIALIZED_NAME_CASH_ACCEPTED)
  @javax.annotation.Nullable
  private Boolean cashAccepted;

  public static final String SERIALIZED_NAME_CREDIT_CARDS_ACCEPTED = "creditCardsAccepted";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARDS_ACCEPTED)
  @javax.annotation.Nullable
  private Boolean creditCardsAccepted;

  public static final String SERIALIZED_NAME_PASS_ID_CREATION = "passIdCreation";
  @SerializedName(SERIALIZED_NAME_PASS_ID_CREATION)
  @javax.annotation.Nullable
  private Boolean passIdCreation;

  public static final String SERIALIZED_NAME_TICKET_PASS_EXCHANGE = "ticketPassExchange";
  @SerializedName(SERIALIZED_NAME_TICKET_PASS_EXCHANGE)
  @javax.annotation.Nullable
  private Boolean ticketPassExchange;

  public static final String SERIALIZED_NAME_OPENING_PERIODS = "openingPeriods";
  @SerializedName(SERIALIZED_NAME_OPENING_PERIODS)
  @javax.annotation.Nullable
  private List<TicketingPeriod> openingPeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  @javax.annotation.Nullable
  private List<String> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  @javax.annotation.Nullable
  private OffsetDateTime lastModified;

  public TicketingLocation() {
  }

  public TicketingLocation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * A jegyértékesítési hely azonosítója.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TicketingLocation type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A jegyértékesítési hely típusa.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public TicketingLocation state(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * A jegyértékesítési hely állapota.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
  }


  public TicketingLocation visible(@javax.annotation.Nullable Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Ha &#x60;false&#x60;, akkor hibás az adat, így a felületen elrejtésre kerül.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(@javax.annotation.Nullable Boolean visible) {
    this.visible = visible;
  }


  public TicketingLocation place(@javax.annotation.Nullable String place) {
    this.place = place;
    return this;
  }

  /**
   * A jegyértékesítési hely helye.
   * @return place
   */
  @javax.annotation.Nullable
  public String getPlace() {
    return place;
  }

  public void setPlace(@javax.annotation.Nullable String place) {
    this.place = place;
  }


  public TicketingLocation address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * A jegyértékesítési hely címe.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public TicketingLocation description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A jegyértékesítési hely leírása.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TicketingLocation operator(@javax.annotation.Nullable String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * A jegyértékesítési hely üzemeltetője.
   * @return operator
   */
  @javax.annotation.Nullable
  public String getOperator() {
    return operator;
  }

  public void setOperator(@javax.annotation.Nullable String operator) {
    this.operator = operator;
  }


  public TicketingLocation lat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * A jegyértékesítési hely szélességi koordinátája.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
  }


  public TicketingLocation lon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * A jegyértékesítési hely hosszúsági koordinátája.
   * @return lon
   */
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
  }


  public TicketingLocation cashAccepted(@javax.annotation.Nullable Boolean cashAccepted) {
    this.cashAccepted = cashAccepted;
    return this;
  }

  /**
   * Jelzi, hogy a jegyértékesítési helyen elfogadnak készpénzt.
   * @return cashAccepted
   */
  @javax.annotation.Nullable
  public Boolean getCashAccepted() {
    return cashAccepted;
  }

  public void setCashAccepted(@javax.annotation.Nullable Boolean cashAccepted) {
    this.cashAccepted = cashAccepted;
  }


  public TicketingLocation creditCardsAccepted(@javax.annotation.Nullable Boolean creditCardsAccepted) {
    this.creditCardsAccepted = creditCardsAccepted;
    return this;
  }

  /**
   * Jelzi, hogy a jegyértékesítési helyen elfogadnak bankkártyát.
   * @return creditCardsAccepted
   */
  @javax.annotation.Nullable
  public Boolean getCreditCardsAccepted() {
    return creditCardsAccepted;
  }

  public void setCreditCardsAccepted(@javax.annotation.Nullable Boolean creditCardsAccepted) {
    this.creditCardsAccepted = creditCardsAccepted;
  }


  public TicketingLocation passIdCreation(@javax.annotation.Nullable Boolean passIdCreation) {
    this.passIdCreation = passIdCreation;
    return this;
  }

  /**
   * Lehet-e a helyszínen igazolványt csináltatni.
   * @return passIdCreation
   */
  @javax.annotation.Nullable
  public Boolean getPassIdCreation() {
    return passIdCreation;
  }

  public void setPassIdCreation(@javax.annotation.Nullable Boolean passIdCreation) {
    this.passIdCreation = passIdCreation;
  }


  public TicketingLocation ticketPassExchange(@javax.annotation.Nullable Boolean ticketPassExchange) {
    this.ticketPassExchange = ticketPassExchange;
    return this;
  }

  /**
   * Be lehet-e váltani a helyszínen jegyet.
   * @return ticketPassExchange
   */
  @javax.annotation.Nullable
  public Boolean getTicketPassExchange() {
    return ticketPassExchange;
  }

  public void setTicketPassExchange(@javax.annotation.Nullable Boolean ticketPassExchange) {
    this.ticketPassExchange = ticketPassExchange;
  }


  public TicketingLocation openingPeriods(@javax.annotation.Nullable List<TicketingPeriod> openingPeriods) {
    this.openingPeriods = openingPeriods;
    return this;
  }

  public TicketingLocation addOpeningPeriodsItem(TicketingPeriod openingPeriodsItem) {
    if (this.openingPeriods == null) {
      this.openingPeriods = new ArrayList<>();
    }
    this.openingPeriods.add(openingPeriodsItem);
    return this;
  }

  /**
   * A jegyértékesítési hely nyitvatartása.
   * @return openingPeriods
   */
  @javax.annotation.Nullable
  public List<TicketingPeriod> getOpeningPeriods() {
    return openingPeriods;
  }

  public void setOpeningPeriods(@javax.annotation.Nullable List<TicketingPeriod> openingPeriods) {
    this.openingPeriods = openingPeriods;
  }


  public TicketingLocation products(@javax.annotation.Nullable List<String> products) {
    this.products = products;
    return this;
  }

  public TicketingLocation addProductsItem(String productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Az árusított termékek azonosítói.
   * @return products
   */
  @javax.annotation.Nullable
  public List<String> getProducts() {
    return products;
  }

  public void setProducts(@javax.annotation.Nullable List<String> products) {
    this.products = products;
  }


  public TicketingLocation lastModified(@javax.annotation.Nullable OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * A jegyértékesítési hely utolsó frissítésének időpontja ezredmásodpercben.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(@javax.annotation.Nullable OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketingLocation ticketingLocation = (TicketingLocation) o;
    return Objects.equals(this.id, ticketingLocation.id) &&
        Objects.equals(this.type, ticketingLocation.type) &&
        Objects.equals(this.state, ticketingLocation.state) &&
        Objects.equals(this.visible, ticketingLocation.visible) &&
        Objects.equals(this.place, ticketingLocation.place) &&
        Objects.equals(this.address, ticketingLocation.address) &&
        Objects.equals(this.description, ticketingLocation.description) &&
        Objects.equals(this.operator, ticketingLocation.operator) &&
        Objects.equals(this.lat, ticketingLocation.lat) &&
        Objects.equals(this.lon, ticketingLocation.lon) &&
        Objects.equals(this.cashAccepted, ticketingLocation.cashAccepted) &&
        Objects.equals(this.creditCardsAccepted, ticketingLocation.creditCardsAccepted) &&
        Objects.equals(this.passIdCreation, ticketingLocation.passIdCreation) &&
        Objects.equals(this.ticketPassExchange, ticketingLocation.ticketPassExchange) &&
        Objects.equals(this.openingPeriods, ticketingLocation.openingPeriods) &&
        Objects.equals(this.products, ticketingLocation.products) &&
        Objects.equals(this.lastModified, ticketingLocation.lastModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, state, visible, place, address, description, operator, lat, lon, cashAccepted, creditCardsAccepted, passIdCreation, ticketPassExchange, openingPeriods, products, lastModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketingLocation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    cashAccepted: ").append(toIndentedString(cashAccepted)).append("\n");
    sb.append("    creditCardsAccepted: ").append(toIndentedString(creditCardsAccepted)).append("\n");
    sb.append("    passIdCreation: ").append(toIndentedString(passIdCreation)).append("\n");
    sb.append("    ticketPassExchange: ").append(toIndentedString(ticketPassExchange)).append("\n");
    sb.append("    openingPeriods: ").append(toIndentedString(openingPeriods)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("state");
    openapiFields.add("visible");
    openapiFields.add("place");
    openapiFields.add("address");
    openapiFields.add("description");
    openapiFields.add("operator");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("cashAccepted");
    openapiFields.add("creditCardsAccepted");
    openapiFields.add("passIdCreation");
    openapiFields.add("ticketPassExchange");
    openapiFields.add("openingPeriods");
    openapiFields.add("products");
    openapiFields.add("lastModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TicketingLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TicketingLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TicketingLocation is not found in the empty JSON string", TicketingLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TicketingLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TicketingLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) && !jsonObj.get("place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("place").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if (jsonObj.get("openingPeriods") != null && !jsonObj.get("openingPeriods").isJsonNull()) {
        JsonArray jsonArrayopeningPeriods = jsonObj.getAsJsonArray("openingPeriods");
        if (jsonArrayopeningPeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("openingPeriods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `openingPeriods` to be an array in the JSON string but got `%s`", jsonObj.get("openingPeriods").toString()));
          }

          // validate the optional field `openingPeriods` (array)
          for (int i = 0; i < jsonArrayopeningPeriods.size(); i++) {
            TicketingPeriod.validateJsonElement(jsonArrayopeningPeriods.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TicketingLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TicketingLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TicketingLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TicketingLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<TicketingLocation>() {
           @Override
           public void write(JsonWriter out, TicketingLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TicketingLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TicketingLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TicketingLocation
   * @throws IOException if the JSON string is invalid with respect to TicketingLocation
   */
  public static TicketingLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TicketingLocation.class);
  }

  /**
   * Convert an instance of TicketingLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

