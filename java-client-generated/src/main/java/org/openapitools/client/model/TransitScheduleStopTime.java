/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Az irányhoz tartozó menetrendi bejegyzések.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitScheduleStopTime {
  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  @javax.annotation.Nullable
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_HEADSIGN = "stopHeadsign";
  @SerializedName(SERIALIZED_NAME_STOP_HEADSIGN)
  @javax.annotation.Nullable
  private String stopHeadsign;

  public static final String SERIALIZED_NAME_ARRIVAL_TIME = "arrivalTime";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_TIME)
  @javax.annotation.Nullable
  private Long arrivalTime;

  public static final String SERIALIZED_NAME_DEPARTURE_TIME = "departureTime";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_TIME)
  @javax.annotation.Nullable
  private Long departureTime;

  public static final String SERIALIZED_NAME_PREDICTED_ARRIVAL_TIME = "predictedArrivalTime";
  @SerializedName(SERIALIZED_NAME_PREDICTED_ARRIVAL_TIME)
  @javax.annotation.Nullable
  private Long predictedArrivalTime;

  public static final String SERIALIZED_NAME_PREDICTED_DEPARTURE_TIME = "predictedDepartureTime";
  @SerializedName(SERIALIZED_NAME_PREDICTED_DEPARTURE_TIME)
  @javax.annotation.Nullable
  private Long predictedDepartureTime;

  public static final String SERIALIZED_NAME_UNCERTAIN = "uncertain";
  @SerializedName(SERIALIZED_NAME_UNCERTAIN)
  @javax.annotation.Nullable
  private Boolean uncertain;

  public static final String SERIALIZED_NAME_TRIP_ID = "tripId";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  @javax.annotation.Nullable
  private String tripId;

  public static final String SERIALIZED_NAME_SERVICE_DATE = "serviceDate";
  @SerializedName(SERIALIZED_NAME_SERVICE_DATE)
  @javax.annotation.Nullable
  private String serviceDate;

  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE = "wheelchairAccessible";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE)
  @javax.annotation.Nullable
  private Boolean wheelchairAccessible;

  public static final String SERIALIZED_NAME_MAY_REQUIRE_BOOKING = "mayRequireBooking";
  @SerializedName(SERIALIZED_NAME_MAY_REQUIRE_BOOKING)
  @javax.annotation.Nullable
  private Boolean mayRequireBooking;

  public static final String SERIALIZED_NAME_GROUP_IDS = "groupIds";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  @javax.annotation.Nullable
  private List<String> groupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_IDS = "alertIds";
  @SerializedName(SERIALIZED_NAME_ALERT_IDS)
  @javax.annotation.Nullable
  private List<String> alertIds = new ArrayList<>();

  public TransitScheduleStopTime() {
  }

  public TransitScheduleStopTime stopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * A megálló azonosítója
   * @return stopId
   */
  @javax.annotation.Nullable
  public String getStopId() {
    return stopId;
  }

  public void setStopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
  }


  public TransitScheduleStopTime stopHeadsign(@javax.annotation.Nullable String stopHeadsign) {
    this.stopHeadsign = stopHeadsign;
    return this;
  }

  /**
   * A megállóban kijelzett célállomás.
   * @return stopHeadsign
   */
  @javax.annotation.Nullable
  public String getStopHeadsign() {
    return stopHeadsign;
  }

  public void setStopHeadsign(@javax.annotation.Nullable String stopHeadsign) {
    this.stopHeadsign = stopHeadsign;
  }


  public TransitScheduleStopTime arrivalTime(@javax.annotation.Nullable Long arrivalTime) {
    this.arrivalTime = arrivalTime;
    return this;
  }

  /**
   * A megállóba érkezés tervezett ideje epoch másodbercben. Az első megállónál hiányzik.
   * @return arrivalTime
   */
  @javax.annotation.Nullable
  public Long getArrivalTime() {
    return arrivalTime;
  }

  public void setArrivalTime(@javax.annotation.Nullable Long arrivalTime) {
    this.arrivalTime = arrivalTime;
  }


  public TransitScheduleStopTime departureTime(@javax.annotation.Nullable Long departureTime) {
    this.departureTime = departureTime;
    return this;
  }

  /**
   * A megállóból való indulás tervezett ideje epoch másodbercben. Az utolsó megállónál hiányzik.
   * @return departureTime
   */
  @javax.annotation.Nullable
  public Long getDepartureTime() {
    return departureTime;
  }

  public void setDepartureTime(@javax.annotation.Nullable Long departureTime) {
    this.departureTime = departureTime;
  }


  public TransitScheduleStopTime predictedArrivalTime(@javax.annotation.Nullable Long predictedArrivalTime) {
    this.predictedArrivalTime = predictedArrivalTime;
    return this;
  }

  /**
   * A megállóba érkezés becsült ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az első megállónál hiányzik.
   * @return predictedArrivalTime
   */
  @javax.annotation.Nullable
  public Long getPredictedArrivalTime() {
    return predictedArrivalTime;
  }

  public void setPredictedArrivalTime(@javax.annotation.Nullable Long predictedArrivalTime) {
    this.predictedArrivalTime = predictedArrivalTime;
  }


  public TransitScheduleStopTime predictedDepartureTime(@javax.annotation.Nullable Long predictedDepartureTime) {
    this.predictedDepartureTime = predictedDepartureTime;
    return this;
  }

  /**
   * A megállóból való becsült indulás ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az utolsó megállónál hiányzik.
   * @return predictedDepartureTime
   */
  @javax.annotation.Nullable
  public Long getPredictedDepartureTime() {
    return predictedDepartureTime;
  }

  public void setPredictedDepartureTime(@javax.annotation.Nullable Long predictedDepartureTime) {
    this.predictedDepartureTime = predictedDepartureTime;
  }


  public TransitScheduleStopTime uncertain(@javax.annotation.Nullable Boolean uncertain) {
    this.uncertain = uncertain;
    return this;
  }

  /**
   * Igaz, ha a menethez tartozó valós idejű adatok bizonytalanok.
   * @return uncertain
   */
  @javax.annotation.Nullable
  public Boolean getUncertain() {
    return uncertain;
  }

  public void setUncertain(@javax.annotation.Nullable Boolean uncertain) {
    this.uncertain = uncertain;
  }


  public TransitScheduleStopTime tripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
    return this;
  }

  /**
   * A bejegyzést tartalmazó menet azonosítója.
   * @return tripId
   */
  @javax.annotation.Nullable
  public String getTripId() {
    return tripId;
  }

  public void setTripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
  }


  public TransitScheduleStopTime serviceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
    return this;
  }

  /**
   * A bejegyzéshez tartozó menet menetrendi napja.
   * @return serviceDate
   */
  @javax.annotation.Nullable
  public String getServiceDate() {
    return serviceDate;
  }

  public void setServiceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
  }


  public TransitScheduleStopTime wheelchairAccessible(@javax.annotation.Nullable Boolean wheelchairAccessible) {
    this.wheelchairAccessible = wheelchairAccessible;
    return this;
  }

  /**
   * A bejegyzéshez tartozó menet alacsonypadlóssága.
   * @return wheelchairAccessible
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessible() {
    return wheelchairAccessible;
  }

  public void setWheelchairAccessible(@javax.annotation.Nullable Boolean wheelchairAccessible) {
    this.wheelchairAccessible = wheelchairAccessible;
  }


  public TransitScheduleStopTime mayRequireBooking(@javax.annotation.Nullable Boolean mayRequireBooking) {
    this.mayRequireBooking = mayRequireBooking;
    return this;
  }

  /**
   * Igaz, ha a menet legalább egy rákövetkező megállója foglalást igényel.
   * @return mayRequireBooking
   */
  @javax.annotation.Nullable
  public Boolean getMayRequireBooking() {
    return mayRequireBooking;
  }

  public void setMayRequireBooking(@javax.annotation.Nullable Boolean mayRequireBooking) {
    this.mayRequireBooking = mayRequireBooking;
  }


  @Deprecated
  public TransitScheduleStopTime groupIds(@javax.annotation.Nullable List<String> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public TransitScheduleStopTime addGroupIdsItem(String groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

  /**
   * A megálló csoportjának azonosítója.
   * @return groupIds
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getGroupIds() {
    return groupIds;
  }

  @Deprecated
  public void setGroupIds(@javax.annotation.Nullable List<String> groupIds) {
    this.groupIds = groupIds;
  }


  public TransitScheduleStopTime alertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
    return this;
  }

  public TransitScheduleStopTime addAlertIdsItem(String alertIdsItem) {
    if (this.alertIds == null) {
      this.alertIds = new ArrayList<>();
    }
    this.alertIds.add(alertIdsItem);
    return this;
  }

  /**
   * A megállóhoz tartozó aktív zavarok azonosítóinak listája.
   * @return alertIds
   */
  @javax.annotation.Nullable
  public List<String> getAlertIds() {
    return alertIds;
  }

  public void setAlertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitScheduleStopTime transitScheduleStopTime = (TransitScheduleStopTime) o;
    return Objects.equals(this.stopId, transitScheduleStopTime.stopId) &&
        Objects.equals(this.stopHeadsign, transitScheduleStopTime.stopHeadsign) &&
        Objects.equals(this.arrivalTime, transitScheduleStopTime.arrivalTime) &&
        Objects.equals(this.departureTime, transitScheduleStopTime.departureTime) &&
        Objects.equals(this.predictedArrivalTime, transitScheduleStopTime.predictedArrivalTime) &&
        Objects.equals(this.predictedDepartureTime, transitScheduleStopTime.predictedDepartureTime) &&
        Objects.equals(this.uncertain, transitScheduleStopTime.uncertain) &&
        Objects.equals(this.tripId, transitScheduleStopTime.tripId) &&
        Objects.equals(this.serviceDate, transitScheduleStopTime.serviceDate) &&
        Objects.equals(this.wheelchairAccessible, transitScheduleStopTime.wheelchairAccessible) &&
        Objects.equals(this.mayRequireBooking, transitScheduleStopTime.mayRequireBooking) &&
        Objects.equals(this.groupIds, transitScheduleStopTime.groupIds) &&
        Objects.equals(this.alertIds, transitScheduleStopTime.alertIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(stopId, stopHeadsign, arrivalTime, departureTime, predictedArrivalTime, predictedDepartureTime, uncertain, tripId, serviceDate, wheelchairAccessible, mayRequireBooking, groupIds, alertIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitScheduleStopTime {\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopHeadsign: ").append(toIndentedString(stopHeadsign)).append("\n");
    sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
    sb.append("    departureTime: ").append(toIndentedString(departureTime)).append("\n");
    sb.append("    predictedArrivalTime: ").append(toIndentedString(predictedArrivalTime)).append("\n");
    sb.append("    predictedDepartureTime: ").append(toIndentedString(predictedDepartureTime)).append("\n");
    sb.append("    uncertain: ").append(toIndentedString(uncertain)).append("\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("    serviceDate: ").append(toIndentedString(serviceDate)).append("\n");
    sb.append("    wheelchairAccessible: ").append(toIndentedString(wheelchairAccessible)).append("\n");
    sb.append("    mayRequireBooking: ").append(toIndentedString(mayRequireBooking)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    alertIds: ").append(toIndentedString(alertIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stopId");
    openapiFields.add("stopHeadsign");
    openapiFields.add("arrivalTime");
    openapiFields.add("departureTime");
    openapiFields.add("predictedArrivalTime");
    openapiFields.add("predictedDepartureTime");
    openapiFields.add("uncertain");
    openapiFields.add("tripId");
    openapiFields.add("serviceDate");
    openapiFields.add("wheelchairAccessible");
    openapiFields.add("mayRequireBooking");
    openapiFields.add("groupIds");
    openapiFields.add("alertIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitScheduleStopTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      /*
    if (jsonElement == null) {
        if (!TransitScheduleStopTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitScheduleStopTime is not found in the empty JSON string", TransitScheduleStopTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitScheduleStopTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitScheduleStopTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stopId") != null && !jsonObj.get("stopId").isJsonNull()) && !jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if ((jsonObj.get("stopHeadsign") != null && !jsonObj.get("stopHeadsign").isJsonNull()) && !jsonObj.get("stopHeadsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopHeadsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopHeadsign").toString()));
      }
      if ((jsonObj.get("tripId") != null && !jsonObj.get("tripId").isJsonNull()) && !jsonObj.get("tripId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripId").toString()));
      }
      if ((jsonObj.get("serviceDate") != null && !jsonObj.get("serviceDate").isJsonNull()) && !jsonObj.get("serviceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupIds") != null && !jsonObj.get("groupIds").isJsonNull() && !jsonObj.get("groupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupIds` to be an array in the JSON string but got `%s`", jsonObj.get("groupIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertIds") != null && !jsonObj.get("alertIds").isJsonNull() && !jsonObj.get("alertIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertIds` to be an array in the JSON string but got `%s`", jsonObj.get("alertIds").toString()));
      }*/
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitScheduleStopTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitScheduleStopTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitScheduleStopTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitScheduleStopTime.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitScheduleStopTime>() {
           @Override
           public void write(JsonWriter out, TransitScheduleStopTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitScheduleStopTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitScheduleStopTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitScheduleStopTime
   * @throws IOException if the JSON string is invalid with respect to TransitScheduleStopTime
   */
  public static TransitScheduleStopTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitScheduleStopTime.class);
  }

  /**
   * Convert an instance of TransitScheduleStopTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

