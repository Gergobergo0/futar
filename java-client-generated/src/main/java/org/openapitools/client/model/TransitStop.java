/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransitStopStyle;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Megállók referenciáinak listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitStop {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_VERTEX = "vertex";
  @SerializedName(SERIALIZED_NAME_VERTEX)
  @javax.annotation.Nullable
  private String vertex;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  @javax.annotation.Nullable
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  @javax.annotation.Nullable
  private Double lon;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nullable
  private String direction;

  public static final String SERIALIZED_NAME_PLATFORM_CODE = "platformCode";
  @SerializedName(SERIALIZED_NAME_PLATFORM_CODE)
  @javax.annotation.Nullable
  private String platformCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  @javax.annotation.Nullable
  private Integer locationType;

  public static final String SERIALIZED_NAME_LOCATION_SUB_TYPE = "locationSubType";
  @SerializedName(SERIALIZED_NAME_LOCATION_SUB_TYPE)
  @javax.annotation.Nullable
  private String locationSubType;

  public static final String SERIALIZED_NAME_PARENT_STATION_ID = "parentStationId";
  @SerializedName(SERIALIZED_NAME_PARENT_STATION_ID)
  @javax.annotation.Nullable
  private String parentStationId;

  /**
   * A megálló típusa. Deprecated: használjuk a &#x60;style&#x60; attribútumot.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    WALK("WALK"),
    
    BICYCLE("BICYCLE"),
    
    CAR("CAR"),
    
    TRAM("TRAM"),
    
    SUBWAY("SUBWAY"),
    
    SUBURBAN_RAILWAY("SUBURBAN_RAILWAY"),
    
    RAIL("RAIL"),
    
    COACH("COACH"),
    
    BUS("BUS"),
    
    TROLLEYBUS("TROLLEYBUS"),
    
    FERRY("FERRY"),
    
    CABLE_CAR("CABLE_CAR"),
    
    GONDOLA("GONDOLA"),
    
    FUNICULAR("FUNICULAR"),
    
    TRANSIT("TRANSIT"),
    
    TRAINISH("TRAINISH"),
    
    BUSISH("BUSISH"),
    
    LEG_SWITCH("LEG_SWITCH"),
    
    CUSTOM_MOTOR_VEHICLE("CUSTOM_MOTOR_VEHICLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {

      /*
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
      */
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_WHEELCHAIR_BOARDING = "wheelchairBoarding";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_BOARDING)
  @javax.annotation.Nullable
  private Boolean wheelchairBoarding;

  public static final String SERIALIZED_NAME_ROUTE_IDS = "routeIds";
  @SerializedName(SERIALIZED_NAME_ROUTE_IDS)
  @javax.annotation.Nullable
  private List<String> routeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOP_COLOR_TYPE = "stopColorType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STOP_COLOR_TYPE)
  @javax.annotation.Nullable
  private String stopColorType;

  public static final String SERIALIZED_NAME_ALERT_IDS = "alertIds";
  @SerializedName(SERIALIZED_NAME_ALERT_IDS)
  @javax.annotation.Nullable
  private List<String> alertIds;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  @javax.annotation.Nullable
  private TransitStopStyle style;

  public TransitStop() {
  }

  public TransitStop id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * A megálló azonosítója.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TransitStop vertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
    return this;
  }

  /**
   * A megálló utazástervező azonosítója, amelyet a &#x60;fromPlace&#x60; és a &#x60;toPlace&#x60; megadásához lehet használni.
   * @return vertex
   */
  @javax.annotation.Nullable
  public String getVertex() {
    return vertex;
  }

  public void setVertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
  }


  public TransitStop lat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * A megálló szélességi koordinátája.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
  }


  public TransitStop lon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * A megálló hosszúsági koordinátája.
   * @return lon
   */
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
  }


  public TransitStop name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * A megálló neve.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TransitStop code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * A megálló kódja.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public TransitStop direction(@javax.annotation.Nullable String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * A megálló iránya.
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nullable String direction) {
    this.direction = direction;
  }


  public TransitStop platformCode(@javax.annotation.Nullable String platformCode) {
    this.platformCode = platformCode;
    return this;
  }

  /**
   * A megálló peron-kódja.
   * @return platformCode
   */
  @javax.annotation.Nullable
  public String getPlatformCode() {
    return platformCode;
  }

  public void setPlatformCode(@javax.annotation.Nullable String platformCode) {
    this.platformCode = platformCode;
  }


  public TransitStop description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A megálló leírása.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TransitStop locationType(@javax.annotation.Nullable Integer locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * A megálló hely-típusa.
   * @return locationType
   */
  @javax.annotation.Nullable
  public Integer getLocationType() {
    return locationType;
  }

  public void setLocationType(@javax.annotation.Nullable Integer locationType) {
    this.locationType = locationType;
  }


  public TransitStop locationSubType(@javax.annotation.Nullable String locationSubType) {
    this.locationSubType = locationSubType;
    return this;
  }

  /**
   * A megálló hely-altípusa.
   * @return locationSubType
   */
  @javax.annotation.Nullable
  public String getLocationSubType() {
    return locationSubType;
  }

  public void setLocationSubType(@javax.annotation.Nullable String locationSubType) {
    this.locationSubType = locationSubType;
  }


  public TransitStop parentStationId(@javax.annotation.Nullable String parentStationId) {
    this.parentStationId = parentStationId;
    return this;
  }

  /**
   * A szülő-megálló azonosítója.
   * @return parentStationId
   */
  @javax.annotation.Nullable
  public String getParentStationId() {
    return parentStationId;
  }

  public void setParentStationId(@javax.annotation.Nullable String parentStationId) {
    this.parentStationId = parentStationId;
  }


  @Deprecated
  public TransitStop type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A megálló típusa. Deprecated: használjuk a &#x60;style&#x60; attribútumot.
   * @return type
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  @Deprecated
  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public TransitStop wheelchairBoarding(@javax.annotation.Nullable Boolean wheelchairBoarding) {
    this.wheelchairBoarding = wheelchairBoarding;
    return this;
  }

  /**
   * Akadálymentesített-e a megálló.
   * @return wheelchairBoarding
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairBoarding() {
    return wheelchairBoarding;
  }

  public void setWheelchairBoarding(@javax.annotation.Nullable Boolean wheelchairBoarding) {
    this.wheelchairBoarding = wheelchairBoarding;
  }


  public TransitStop routeIds(@javax.annotation.Nullable List<String> routeIds) {
    this.routeIds = routeIds;
    return this;
  }

  public TransitStop addRouteIdsItem(String routeIdsItem) {
    if (this.routeIds == null) {
      this.routeIds = new ArrayList<>();
    }
    this.routeIds.add(routeIdsItem);
    return this;
  }

  /**
   * A megállót érintő járatok azonosítói.
   * @return routeIds
   */
  @javax.annotation.Nullable
  public List<String> getRouteIds() {
    return routeIds;
  }

  public void setRouteIds(@javax.annotation.Nullable List<String> routeIds) {
    this.routeIds = routeIds;
  }


  @Deprecated
  public TransitStop stopColorType(@javax.annotation.Nullable String stopColorType) {
    this.stopColorType = stopColorType;
    return this;
  }

  /**
   * A megálló színezésének típusa. Deprecated: használjuk a &#x60;style&#x60; attribútumot.
   * @return stopColorType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getStopColorType() {
    return stopColorType;
  }

  @Deprecated
  public void setStopColorType(@javax.annotation.Nullable String stopColorType) {
    this.stopColorType = stopColorType;
  }


  public TransitStop alertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
    return this;
  }

  public TransitStop addAlertIdsItem(String alertIdsItem) {
    if (this.alertIds == null) {
      this.alertIds = new ArrayList<>();
    }
    this.alertIds.add(alertIdsItem);
    return this;
  }

  /**
   * A megállóra vonatkozó aktív zavarok azonosítói.
   * @return alertIds
   */
  @javax.annotation.Nullable
  public List<String> getAlertIds() {
    return alertIds;
  }

  public void setAlertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
  }


  public TransitStop style(@javax.annotation.Nullable TransitStopStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public TransitStopStyle getStyle() {
    return style;
  }

  public void setStyle(@javax.annotation.Nullable TransitStopStyle style) {
    this.style = style;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitStop transitStop = (TransitStop) o;
    return Objects.equals(this.id, transitStop.id) &&
        Objects.equals(this.vertex, transitStop.vertex) &&
        Objects.equals(this.lat, transitStop.lat) &&
        Objects.equals(this.lon, transitStop.lon) &&
        Objects.equals(this.name, transitStop.name) &&
        Objects.equals(this.code, transitStop.code) &&
        Objects.equals(this.direction, transitStop.direction) &&
        Objects.equals(this.platformCode, transitStop.platformCode) &&
        Objects.equals(this.description, transitStop.description) &&
        Objects.equals(this.locationType, transitStop.locationType) &&
        Objects.equals(this.locationSubType, transitStop.locationSubType) &&
        Objects.equals(this.parentStationId, transitStop.parentStationId) &&
        Objects.equals(this.type, transitStop.type) &&
        Objects.equals(this.wheelchairBoarding, transitStop.wheelchairBoarding) &&
        Objects.equals(this.routeIds, transitStop.routeIds) &&
        Objects.equals(this.stopColorType, transitStop.stopColorType) &&
        Objects.equals(this.alertIds, transitStop.alertIds) &&
        Objects.equals(this.style, transitStop.style);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, vertex, lat, lon, name, code, direction, platformCode, description, locationType, locationSubType, parentStationId, type, wheelchairBoarding, routeIds, stopColorType, alertIds, style);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitStop {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    vertex: ").append(toIndentedString(vertex)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    platformCode: ").append(toIndentedString(platformCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    locationSubType: ").append(toIndentedString(locationSubType)).append("\n");
    sb.append("    parentStationId: ").append(toIndentedString(parentStationId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wheelchairBoarding: ").append(toIndentedString(wheelchairBoarding)).append("\n");
    sb.append("    routeIds: ").append(toIndentedString(routeIds)).append("\n");
    sb.append("    stopColorType: ").append(toIndentedString(stopColorType)).append("\n");
    sb.append("    alertIds: ").append(toIndentedString(alertIds)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("vertex");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("direction");
    openapiFields.add("platformCode");
    openapiFields.add("description");
    openapiFields.add("locationType");
    openapiFields.add("locationSubType");
    openapiFields.add("parentStationId");
    openapiFields.add("type");
    openapiFields.add("wheelchairBoarding");
    openapiFields.add("routeIds");
    openapiFields.add("stopColorType");
    openapiFields.add("alertIds");
    openapiFields.add("style");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitStop
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    /*
      if (jsonElement == null) {
        if (!TransitStop.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitStop is not found in the empty JSON string", TransitStop.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitStop.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitStop` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("vertex") != null && !jsonObj.get("vertex").isJsonNull()) && !jsonObj.get("vertex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertex").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("platformCode") != null && !jsonObj.get("platformCode").isJsonNull()) && !jsonObj.get("platformCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformCode").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("locationSubType") != null && !jsonObj.get("locationSubType").isJsonNull()) && !jsonObj.get("locationSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationSubType").toString()));
      }
      if ((jsonObj.get("parentStationId") != null && !jsonObj.get("parentStationId").isJsonNull()) && !jsonObj.get("parentStationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentStationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentStationId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("routeIds") != null && !jsonObj.get("routeIds").isJsonNull() && !jsonObj.get("routeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeIds` to be an array in the JSON string but got `%s`", jsonObj.get("routeIds").toString()));
      }
      if ((jsonObj.get("stopColorType") != null && !jsonObj.get("stopColorType").isJsonNull()) && !jsonObj.get("stopColorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopColorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopColorType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertIds") != null && !jsonObj.get("alertIds").isJsonNull() && !jsonObj.get("alertIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertIds` to be an array in the JSON string but got `%s`", jsonObj.get("alertIds").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        TransitStopStyle.validateJsonElement(jsonObj.get("style"));
      }*/
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitStop.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitStop' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitStop> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitStop.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitStop>() {
           @Override
           public void write(JsonWriter out, TransitStop value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitStop read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitStop given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitStop
   * @throws IOException if the JSON string is invalid with respect to TransitStop
   */
  public static TransitStop fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitStop.class);
  }

  /**
   * Convert an instance of TransitStop to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

