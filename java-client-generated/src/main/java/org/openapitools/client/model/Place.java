/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TicketingLocation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class Place {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_TICKETING_LOCATION = "ticketingLocation";
  @SerializedName(SERIALIZED_NAME_TICKETING_LOCATION)
  @javax.annotation.Nullable
  private TicketingLocation ticketingLocation;

  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  @javax.annotation.Nullable
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_CODE = "stopCode";
  @SerializedName(SERIALIZED_NAME_STOP_CODE)
  @javax.annotation.Nullable
  private String stopCode;

  public static final String SERIALIZED_NAME_PLATFORM_CODE = "platformCode";
  @SerializedName(SERIALIZED_NAME_PLATFORM_CODE)
  @javax.annotation.Nullable
  private String platformCode;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  @javax.annotation.Nullable
  private Double lon;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  @javax.annotation.Nullable
  private Double lat;

  public static final String SERIALIZED_NAME_ARRIVAL = "arrival";
  @SerializedName(SERIALIZED_NAME_ARRIVAL)
  @javax.annotation.Nullable
  private OffsetDateTime arrival;

  public static final String SERIALIZED_NAME_DEPARTURE = "departure";
  @SerializedName(SERIALIZED_NAME_DEPARTURE)
  @javax.annotation.Nullable
  private OffsetDateTime departure;

  public static final String SERIALIZED_NAME_ORIG = "orig";
  @SerializedName(SERIALIZED_NAME_ORIG)
  @javax.annotation.Nullable
  private String orig;

  public static final String SERIALIZED_NAME_STOP_INDEX = "stopIndex";
  @SerializedName(SERIALIZED_NAME_STOP_INDEX)
  @javax.annotation.Nullable
  private Integer stopIndex;

  public static final String SERIALIZED_NAME_STOP_SEQUENCE = "stopSequence";
  @SerializedName(SERIALIZED_NAME_STOP_SEQUENCE)
  @javax.annotation.Nullable
  private Integer stopSequence;

  public Place() {
  }

  public Place name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Megálló esetén a megálló neve, POI-nál a POI neve.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public Place ticketingLocation(@javax.annotation.Nullable TicketingLocation ticketingLocation) {
    this.ticketingLocation = ticketingLocation;
    return this;
  }

  /**
   * Get ticketingLocation
   * @return ticketingLocation
   */
  @javax.annotation.Nullable
  public TicketingLocation getTicketingLocation() {
    return ticketingLocation;
  }

  public void setTicketingLocation(@javax.annotation.Nullable TicketingLocation ticketingLocation) {
    this.ticketingLocation = ticketingLocation;
  }


  public Place stopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * A megálló azonosítója, ha a hely egy megálló.
   * @return stopId
   */
  @javax.annotation.Nullable
  public String getStopId() {
    return stopId;
  }

  public void setStopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
  }


  public Place stopCode(@javax.annotation.Nullable String stopCode) {
    this.stopCode = stopCode;
    return this;
  }

  /**
   * A megálló kódja, ha a hely egy megálló.
   * @return stopCode
   */
  @javax.annotation.Nullable
  public String getStopCode() {
    return stopCode;
  }

  public void setStopCode(@javax.annotation.Nullable String stopCode) {
    this.stopCode = stopCode;
  }


  public Place platformCode(@javax.annotation.Nullable String platformCode) {
    this.platformCode = platformCode;
    return this;
  }

  /**
   * A megálló peron-kódja, ha a hely egy megálló.
   * @return platformCode
   */
  @javax.annotation.Nullable
  public String getPlatformCode() {
    return platformCode;
  }

  public void setPlatformCode(@javax.annotation.Nullable String platformCode) {
    this.platformCode = platformCode;
  }


  public Place lon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * A hely hosszúsági koordinátája.
   * @return lon
   */
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(@javax.annotation.Nullable Double lon) {
    this.lon = lon;
  }


  public Place lat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * A hely szélességi koordinátája.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(@javax.annotation.Nullable Double lat) {
    this.lat = lat;
  }


  public Place arrival(@javax.annotation.Nullable OffsetDateTime arrival) {
    this.arrival = arrival;
    return this;
  }

  /**
   * A helyre érkezés időpontja ezredmásodpercben.
   * @return arrival
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrival() {
    return arrival;
  }

  public void setArrival(@javax.annotation.Nullable OffsetDateTime arrival) {
    this.arrival = arrival;
  }


  public Place departure(@javax.annotation.Nullable OffsetDateTime departure) {
    this.departure = departure;
    return this;
  }

  /**
   * A helyről való indulás időpontja ezredmásodpercben.
   * @return departure
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeparture() {
    return departure;
  }

  public void setDeparture(@javax.annotation.Nullable OffsetDateTime departure) {
    this.departure = departure;
  }


  public Place orig(@javax.annotation.Nullable String orig) {
    this.orig = orig;
    return this;
  }

  /**
   * Az indulási és az érkezési hely címkéje. Az első és az utolsó útvonal lábon van kitöltve.
   * @return orig
   */
  @javax.annotation.Nullable
  public String getOrig() {
    return orig;
  }

  public void setOrig(@javax.annotation.Nullable String orig) {
    this.orig = orig;
  }


  public Place stopIndex(@javax.annotation.Nullable Integer stopIndex) {
    this.stopIndex = stopIndex;
    return this;
  }

  /**
   * A megálló indexe, ha a hely egy megálló.
   * @return stopIndex
   */
  @javax.annotation.Nullable
  public Integer getStopIndex() {
    return stopIndex;
  }

  public void setStopIndex(@javax.annotation.Nullable Integer stopIndex) {
    this.stopIndex = stopIndex;
  }


  public Place stopSequence(@javax.annotation.Nullable Integer stopSequence) {
    this.stopSequence = stopSequence;
    return this;
  }

  /**
   * A megálló sorszáma a meneten, ha a hely egy megálló.
   * @return stopSequence
   */
  @javax.annotation.Nullable
  public Integer getStopSequence() {
    return stopSequence;
  }

  public void setStopSequence(@javax.annotation.Nullable Integer stopSequence) {
    this.stopSequence = stopSequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Place place = (Place) o;
    return Objects.equals(this.name, place.name) &&
        Objects.equals(this.ticketingLocation, place.ticketingLocation) &&
        Objects.equals(this.stopId, place.stopId) &&
        Objects.equals(this.stopCode, place.stopCode) &&
        Objects.equals(this.platformCode, place.platformCode) &&
        Objects.equals(this.lon, place.lon) &&
        Objects.equals(this.lat, place.lat) &&
        Objects.equals(this.arrival, place.arrival) &&
        Objects.equals(this.departure, place.departure) &&
        Objects.equals(this.orig, place.orig) &&
        Objects.equals(this.stopIndex, place.stopIndex) &&
        Objects.equals(this.stopSequence, place.stopSequence);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ticketingLocation, stopId, stopCode, platformCode, lon, lat, arrival, departure, orig, stopIndex, stopSequence);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Place {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ticketingLocation: ").append(toIndentedString(ticketingLocation)).append("\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopCode: ").append(toIndentedString(stopCode)).append("\n");
    sb.append("    platformCode: ").append(toIndentedString(platformCode)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    orig: ").append(toIndentedString(orig)).append("\n");
    sb.append("    stopIndex: ").append(toIndentedString(stopIndex)).append("\n");
    sb.append("    stopSequence: ").append(toIndentedString(stopSequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("ticketingLocation");
    openapiFields.add("stopId");
    openapiFields.add("stopCode");
    openapiFields.add("platformCode");
    openapiFields.add("lon");
    openapiFields.add("lat");
    openapiFields.add("arrival");
    openapiFields.add("departure");
    openapiFields.add("orig");
    openapiFields.add("stopIndex");
    openapiFields.add("stopSequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Place
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Place.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Place is not found in the empty JSON string", Place.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Place.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Place` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `ticketingLocation`
      if (jsonObj.get("ticketingLocation") != null && !jsonObj.get("ticketingLocation").isJsonNull()) {
        TicketingLocation.validateJsonElement(jsonObj.get("ticketingLocation"));
      }
      if ((jsonObj.get("stopId") != null && !jsonObj.get("stopId").isJsonNull()) && !jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if ((jsonObj.get("stopCode") != null && !jsonObj.get("stopCode").isJsonNull()) && !jsonObj.get("stopCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopCode").toString()));
      }
      if ((jsonObj.get("platformCode") != null && !jsonObj.get("platformCode").isJsonNull()) && !jsonObj.get("platformCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformCode").toString()));
      }
      if ((jsonObj.get("orig") != null && !jsonObj.get("orig").isJsonNull()) && !jsonObj.get("orig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orig").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Place.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Place' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Place> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Place.class));

       return (TypeAdapter<T>) new TypeAdapter<Place>() {
           @Override
           public void write(JsonWriter out, Place value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Place read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Place given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Place
   * @throws IOException if the JSON string is invalid with respect to Place
   */
  public static Place fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Place.class);
  }

  /**
   * Convert an instance of Place to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

