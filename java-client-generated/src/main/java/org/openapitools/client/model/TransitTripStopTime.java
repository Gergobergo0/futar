/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Menet megállóinak listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitTripStopTime {
  public static final String SERIALIZED_NAME_STOP_ID = "stopId";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  @javax.annotation.Nullable
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_HEADSIGN = "stopHeadsign";
  @SerializedName(SERIALIZED_NAME_STOP_HEADSIGN)
  @javax.annotation.Nullable
  private String stopHeadsign;

  public static final String SERIALIZED_NAME_ARRIVAL_TIME = "arrivalTime";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_TIME)
  @javax.annotation.Nullable
  private Long arrivalTime;

  public static final String SERIALIZED_NAME_DEPARTURE_TIME = "departureTime";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_TIME)
  @javax.annotation.Nullable
  private Long departureTime;

  public static final String SERIALIZED_NAME_PREDICTED_ARRIVAL_TIME = "predictedArrivalTime";
  @SerializedName(SERIALIZED_NAME_PREDICTED_ARRIVAL_TIME)
  @javax.annotation.Nullable
  private Long predictedArrivalTime;

  public static final String SERIALIZED_NAME_PREDICTED_DEPARTURE_TIME = "predictedDepartureTime";
  @SerializedName(SERIALIZED_NAME_PREDICTED_DEPARTURE_TIME)
  @javax.annotation.Nullable
  private Long predictedDepartureTime;

  public static final String SERIALIZED_NAME_UNCERTAIN = "uncertain";
  @SerializedName(SERIALIZED_NAME_UNCERTAIN)
  @javax.annotation.Nullable
  private Boolean uncertain;

  public static final String SERIALIZED_NAME_REQUIRES_BOOKING = "requiresBooking";
  @SerializedName(SERIALIZED_NAME_REQUIRES_BOOKING)
  @javax.annotation.Nullable
  private Boolean requiresBooking;

  public static final String SERIALIZED_NAME_STOP_SEQUENCE = "stopSequence";
  @SerializedName(SERIALIZED_NAME_STOP_SEQUENCE)
  @javax.annotation.Nullable
  private Integer stopSequence;

  public static final String SERIALIZED_NAME_SHAPE_DIST_TRAVELED = "shapeDistTraveled";
  @SerializedName(SERIALIZED_NAME_SHAPE_DIST_TRAVELED)
  @javax.annotation.Nullable
  private Double shapeDistTraveled;

  public TransitTripStopTime() {
  }

  public TransitTripStopTime stopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * A megálló azonosítója
   * @return stopId
   */
  @javax.annotation.Nullable
  public String getStopId() {
    return stopId;
  }

  public void setStopId(@javax.annotation.Nullable String stopId) {
    this.stopId = stopId;
  }


  public TransitTripStopTime stopHeadsign(@javax.annotation.Nullable String stopHeadsign) {
    this.stopHeadsign = stopHeadsign;
    return this;
  }

  /**
   * A megállóban kijelzett célállomás.
   * @return stopHeadsign
   */
  @javax.annotation.Nullable
  public String getStopHeadsign() {
    return stopHeadsign;
  }

  public void setStopHeadsign(@javax.annotation.Nullable String stopHeadsign) {
    this.stopHeadsign = stopHeadsign;
  }


  public TransitTripStopTime arrivalTime(@javax.annotation.Nullable Long arrivalTime) {
    this.arrivalTime = arrivalTime;
    return this;
  }

  /**
   * A megállóba érkezés tervezett ideje epoch másodbercben. Az első megállónál hiányzik.
   * @return arrivalTime
   */
  @javax.annotation.Nullable
  public Long getArrivalTime() {
    return arrivalTime;
  }

  public void setArrivalTime(@javax.annotation.Nullable Long arrivalTime) {
    this.arrivalTime = arrivalTime;
  }


  public TransitTripStopTime departureTime(@javax.annotation.Nullable Long departureTime) {
    this.departureTime = departureTime;
    return this;
  }

  /**
   * A megállóból való indulás tervezett ideje epoch másodbercben. Az utolsó megállónál hiányzik.
   * @return departureTime
   */
  @javax.annotation.Nullable
  public Long getDepartureTime() {
    return departureTime;
  }

  public void setDepartureTime(@javax.annotation.Nullable Long departureTime) {
    this.departureTime = departureTime;
  }


  public TransitTripStopTime predictedArrivalTime(@javax.annotation.Nullable Long predictedArrivalTime) {
    this.predictedArrivalTime = predictedArrivalTime;
    return this;
  }

  /**
   * A megállóba érkezés becsült ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az első megállónál hiányzik.
   * @return predictedArrivalTime
   */
  @javax.annotation.Nullable
  public Long getPredictedArrivalTime() {
    return predictedArrivalTime;
  }

  public void setPredictedArrivalTime(@javax.annotation.Nullable Long predictedArrivalTime) {
    this.predictedArrivalTime = predictedArrivalTime;
  }


  public TransitTripStopTime predictedDepartureTime(@javax.annotation.Nullable Long predictedDepartureTime) {
    this.predictedDepartureTime = predictedDepartureTime;
    return this;
  }

  /**
   * A megállóból való becsült indulás ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az utolsó megállónál hiányzik.
   * @return predictedDepartureTime
   */
  @javax.annotation.Nullable
  public Long getPredictedDepartureTime() {
    return predictedDepartureTime;
  }

  public void setPredictedDepartureTime(@javax.annotation.Nullable Long predictedDepartureTime) {
    this.predictedDepartureTime = predictedDepartureTime;
  }


  public TransitTripStopTime uncertain(@javax.annotation.Nullable Boolean uncertain) {
    this.uncertain = uncertain;
    return this;
  }

  /**
   * Igaz, ha a menethez tartozó valós idejű adatok bizonytalanok.
   * @return uncertain
   */
  @javax.annotation.Nullable
  public Boolean getUncertain() {
    return uncertain;
  }

  public void setUncertain(@javax.annotation.Nullable Boolean uncertain) {
    this.uncertain = uncertain;
  }


  public TransitTripStopTime requiresBooking(@javax.annotation.Nullable Boolean requiresBooking) {
    this.requiresBooking = requiresBooking;
    return this;
  }

  /**
   * Igaz, ha ez a megálló foglalást igényel.
   * @return requiresBooking
   */
  @javax.annotation.Nullable
  public Boolean getRequiresBooking() {
    return requiresBooking;
  }

  public void setRequiresBooking(@javax.annotation.Nullable Boolean requiresBooking) {
    this.requiresBooking = requiresBooking;
  }


  public TransitTripStopTime stopSequence(@javax.annotation.Nullable Integer stopSequence) {
    this.stopSequence = stopSequence;
    return this;
  }

  /**
   * A megálló sorrendje a járaton.
   * @return stopSequence
   */
  @javax.annotation.Nullable
  public Integer getStopSequence() {
    return stopSequence;
  }

  public void setStopSequence(@javax.annotation.Nullable Integer stopSequence) {
    this.stopSequence = stopSequence;
  }


  public TransitTripStopTime shapeDistTraveled(@javax.annotation.Nullable Double shapeDistTraveled) {
    this.shapeDistTraveled = shapeDistTraveled;
    return this;
  }

  /**
   * Milyen messze található a megálló az elsőtől a minta mentén méterben.
   * @return shapeDistTraveled
   */
  @javax.annotation.Nullable
  public Double getShapeDistTraveled() {
    return shapeDistTraveled;
  }

  public void setShapeDistTraveled(@javax.annotation.Nullable Double shapeDistTraveled) {
    this.shapeDistTraveled = shapeDistTraveled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitTripStopTime transitTripStopTime = (TransitTripStopTime) o;
    return Objects.equals(this.stopId, transitTripStopTime.stopId) &&
        Objects.equals(this.stopHeadsign, transitTripStopTime.stopHeadsign) &&
        Objects.equals(this.arrivalTime, transitTripStopTime.arrivalTime) &&
        Objects.equals(this.departureTime, transitTripStopTime.departureTime) &&
        Objects.equals(this.predictedArrivalTime, transitTripStopTime.predictedArrivalTime) &&
        Objects.equals(this.predictedDepartureTime, transitTripStopTime.predictedDepartureTime) &&
        Objects.equals(this.uncertain, transitTripStopTime.uncertain) &&
        Objects.equals(this.requiresBooking, transitTripStopTime.requiresBooking) &&
        Objects.equals(this.stopSequence, transitTripStopTime.stopSequence) &&
        Objects.equals(this.shapeDistTraveled, transitTripStopTime.shapeDistTraveled);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(stopId, stopHeadsign, arrivalTime, departureTime, predictedArrivalTime, predictedDepartureTime, uncertain, requiresBooking, stopSequence, shapeDistTraveled);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitTripStopTime {\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopHeadsign: ").append(toIndentedString(stopHeadsign)).append("\n");
    sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
    sb.append("    departureTime: ").append(toIndentedString(departureTime)).append("\n");
    sb.append("    predictedArrivalTime: ").append(toIndentedString(predictedArrivalTime)).append("\n");
    sb.append("    predictedDepartureTime: ").append(toIndentedString(predictedDepartureTime)).append("\n");
    sb.append("    uncertain: ").append(toIndentedString(uncertain)).append("\n");
    sb.append("    requiresBooking: ").append(toIndentedString(requiresBooking)).append("\n");
    sb.append("    stopSequence: ").append(toIndentedString(stopSequence)).append("\n");
    sb.append("    shapeDistTraveled: ").append(toIndentedString(shapeDistTraveled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stopId");
    openapiFields.add("stopHeadsign");
    openapiFields.add("arrivalTime");
    openapiFields.add("departureTime");
    openapiFields.add("predictedArrivalTime");
    openapiFields.add("predictedDepartureTime");
    openapiFields.add("uncertain");
    openapiFields.add("requiresBooking");
    openapiFields.add("stopSequence");
    openapiFields.add("shapeDistTraveled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitTripStopTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitTripStopTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitTripStopTime is not found in the empty JSON string", TransitTripStopTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitTripStopTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitTripStopTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stopId") != null && !jsonObj.get("stopId").isJsonNull()) && !jsonObj.get("stopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopId").toString()));
      }
      if ((jsonObj.get("stopHeadsign") != null && !jsonObj.get("stopHeadsign").isJsonNull()) && !jsonObj.get("stopHeadsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopHeadsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopHeadsign").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitTripStopTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitTripStopTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitTripStopTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitTripStopTime.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitTripStopTime>() {
           @Override
           public void write(JsonWriter out, TransitTripStopTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitTripStopTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitTripStopTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitTripStopTime
   * @throws IOException if the JSON string is invalid with respect to TransitTripStopTime
   */
  public static TransitTripStopTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitTripStopTime.class);
  }

  /**
   * Convert an instance of TransitTripStopTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

