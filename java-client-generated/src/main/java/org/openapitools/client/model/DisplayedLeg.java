/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Az útiterv kivonatos megjelenítéséhez használható  lábak és adatok.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class DisplayedLeg {
  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  @javax.annotation.Nullable
  private Boolean first;

  public static final String SERIALIZED_NAME_LAST = "last";
  @SerializedName(SERIALIZED_NAME_LAST)
  @javax.annotation.Nullable
  private Boolean last;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private Long time;

  public static final String SERIALIZED_NAME_WALK_TO = "walkTo";
  @SerializedName(SERIALIZED_NAME_WALK_TO)
  @javax.annotation.Nullable
  private Boolean walkTo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public DisplayedLeg() {
  }

  public DisplayedLeg first(@javax.annotation.Nullable Boolean first) {
    this.first = first;
    return this;
  }

  /**
   * Jelzi, ha a láb az első az útitervben.
   * @return first
   */
  @javax.annotation.Nullable
  public Boolean getFirst() {
    return first;
  }

  public void setFirst(@javax.annotation.Nullable Boolean first) {
    this.first = first;
  }


  public DisplayedLeg last(@javax.annotation.Nullable Boolean last) {
    this.last = last;
    return this;
  }

  /**
   * Jelzi, ha a láb az utolsó az útitervben.
   * @return last
   */
  @javax.annotation.Nullable
  public Boolean getLast() {
    return last;
  }

  public void setLast(@javax.annotation.Nullable Boolean last) {
    this.last = last;
  }


  public DisplayedLeg time(@javax.annotation.Nullable Long time) {
    this.time = time;
    return this;
  }

  /**
   * Az utolsó lábon az érkezési idő, az összes többin az indulási.
   * @return time
   */
  @javax.annotation.Nullable
  public Long getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable Long time) {
    this.time = time;
  }


  public DisplayedLeg walkTo(@javax.annotation.Nullable Boolean walkTo) {
    this.walkTo = walkTo;
    return this;
  }

  /**
   * Jelzi, hogy a láb nem tranzit típusú.
   * @return walkTo
   */
  @javax.annotation.Nullable
  public Boolean getWalkTo() {
    return walkTo;
  }

  public void setWalkTo(@javax.annotation.Nullable Boolean walkTo) {
    this.walkTo = walkTo;
  }


  public DisplayedLeg name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Az indulási hely neve, kivéve az utolsón, ahol a érkezési helyé.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisplayedLeg displayedLeg = (DisplayedLeg) o;
    return Objects.equals(this.first, displayedLeg.first) &&
        Objects.equals(this.last, displayedLeg.last) &&
        Objects.equals(this.time, displayedLeg.time) &&
        Objects.equals(this.walkTo, displayedLeg.walkTo) &&
        Objects.equals(this.name, displayedLeg.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(first, last, time, walkTo, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisplayedLeg {\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    walkTo: ").append(toIndentedString(walkTo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first");
    openapiFields.add("last");
    openapiFields.add("time");
    openapiFields.add("walkTo");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisplayedLeg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisplayedLeg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisplayedLeg is not found in the empty JSON string", DisplayedLeg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisplayedLeg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisplayedLeg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisplayedLeg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisplayedLeg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisplayedLeg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisplayedLeg.class));

       return (TypeAdapter<T>) new TypeAdapter<DisplayedLeg>() {
           @Override
           public void write(JsonWriter out, DisplayedLeg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisplayedLeg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisplayedLeg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisplayedLeg
   * @throws IOException if the JSON string is invalid with respect to DisplayedLeg
   */
  public static DisplayedLeg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisplayedLeg.class);
  }

  /**
   * Convert an instance of DisplayedLeg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

