/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElevationPoint;
import org.openapitools.client.model.EncodedPolylineBean;
import org.openapitools.client.model.LegTimeZone;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.WalkStep;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Az útiterv lábai (részei).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class Leg {
  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_DEPARTURE_DELAY = "departureDelay";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DELAY)
  @javax.annotation.Nullable
  private Integer departureDelay;

  public static final String SERIALIZED_NAME_ARRIVAL_DELAY = "arrivalDelay";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DELAY)
  @javax.annotation.Nullable
  private Integer arrivalDelay;

  public static final String SERIALIZED_NAME_REAL_TIME = "realTime";
  @SerializedName(SERIALIZED_NAME_REAL_TIME)
  @javax.annotation.Nullable
  private Boolean realTime;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  @javax.annotation.Nullable
  private Double distance;

  public static final String SERIALIZED_NAME_PATHWAY = "pathway";
  @SerializedName(SERIALIZED_NAME_PATHWAY)
  @javax.annotation.Nullable
  private Boolean pathway;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private String mode;

  public static final String SERIALIZED_NAME_AGENCY_NAME = "agencyName";
  @SerializedName(SERIALIZED_NAME_AGENCY_NAME)
  @javax.annotation.Nullable
  private String agencyName;

  public static final String SERIALIZED_NAME_AGENCY_URL = "agencyUrl";
  @SerializedName(SERIALIZED_NAME_AGENCY_URL)
  @javax.annotation.Nullable
  private String agencyUrl;

  public static final String SERIALIZED_NAME_AGENCY_TIME_ZONE_OFFSET = "agencyTimeZoneOffset";
  @SerializedName(SERIALIZED_NAME_AGENCY_TIME_ZONE_OFFSET)
  @javax.annotation.Nullable
  private Integer agencyTimeZoneOffset;

  public static final String SERIALIZED_NAME_ROUTE_COLOR = "routeColor";
  @SerializedName(SERIALIZED_NAME_ROUTE_COLOR)
  @javax.annotation.Nullable
  private String routeColor;

  public static final String SERIALIZED_NAME_ROUTE_ID = "routeId";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  @javax.annotation.Nullable
  private String routeId;

  public static final String SERIALIZED_NAME_ROUTE_TEXT_COLOR = "routeTextColor";
  @SerializedName(SERIALIZED_NAME_ROUTE_TEXT_COLOR)
  @javax.annotation.Nullable
  private String routeTextColor;

  public static final String SERIALIZED_NAME_INTERLINE_WITH_PREVIOUS_LEG = "interlineWithPreviousLeg";
  @SerializedName(SERIALIZED_NAME_INTERLINE_WITH_PREVIOUS_LEG)
  @javax.annotation.Nullable
  private Boolean interlineWithPreviousLeg;

  public static final String SERIALIZED_NAME_TRIP_BLOCK_ID = "tripBlockId";
  @SerializedName(SERIALIZED_NAME_TRIP_BLOCK_ID)
  @javax.annotation.Nullable
  private String tripBlockId;

  public static final String SERIALIZED_NAME_HEADSIGN = "headsign";
  @SerializedName(SERIALIZED_NAME_HEADSIGN)
  @javax.annotation.Nullable
  private String headsign;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  @javax.annotation.Nullable
  private String agencyId;

  public static final String SERIALIZED_NAME_TRIP_ID = "tripId";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  @javax.annotation.Nullable
  private String tripId;

  public static final String SERIALIZED_NAME_SERVICE_DATE = "serviceDate";
  @SerializedName(SERIALIZED_NAME_SERVICE_DATE)
  @javax.annotation.Nullable
  private String serviceDate;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private Place from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nullable
  private Place to;

  public static final String SERIALIZED_NAME_LEG_GEOMETRY = "legGeometry";
  @SerializedName(SERIALIZED_NAME_LEG_GEOMETRY)
  @javax.annotation.Nullable
  private EncodedPolylineBean legGeometry;

  public static final String SERIALIZED_NAME_LEG_ELEVATION = "legElevation";
  @SerializedName(SERIALIZED_NAME_LEG_ELEVATION)
  @javax.annotation.Nullable
  private List<ElevationPoint> legElevation = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_IDS = "alertIds";
  @SerializedName(SERIALIZED_NAME_ALERT_IDS)
  @javax.annotation.Nullable
  private List<String> alertIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTE_SHORT_NAME = "routeShortName";
  @SerializedName(SERIALIZED_NAME_ROUTE_SHORT_NAME)
  @javax.annotation.Nullable
  private String routeShortName;

  public static final String SERIALIZED_NAME_ROUTE_LONG_NAME = "routeLongName";
  @SerializedName(SERIALIZED_NAME_ROUTE_LONG_NAME)
  @javax.annotation.Nullable
  private String routeLongName;

  public static final String SERIALIZED_NAME_BOARD_RULE = "boardRule";
  @SerializedName(SERIALIZED_NAME_BOARD_RULE)
  @javax.annotation.Nullable
  private String boardRule;

  public static final String SERIALIZED_NAME_ALIGHT_RULE = "alightRule";
  @SerializedName(SERIALIZED_NAME_ALIGHT_RULE)
  @javax.annotation.Nullable
  private String alightRule;

  public static final String SERIALIZED_NAME_RENTED_BIKE = "rentedBike";
  @SerializedName(SERIALIZED_NAME_RENTED_BIKE)
  @javax.annotation.Nullable
  private Boolean rentedBike;

  /**
   * A várakozási idő mennyiségi típusa a tranzit típusú lábon.
   */
  @JsonAdapter(WaitEnum.Adapter.class)
  public enum WaitEnum {
    SHORT("SHORT"),
    
    LONG("LONG");

    private String value;

    WaitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaitEnum fromValue(String value) {
      for (WaitEnum b : WaitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WaitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAIT = "wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  @javax.annotation.Nullable
  private WaitEnum wait;

  public static final String SERIALIZED_NAME_ROUTE_IDS = "routeIds";
  @SerializedName(SERIALIZED_NAME_ROUTE_IDS)
  @javax.annotation.Nullable
  private List<String> routeIds;

  public static final String SERIALIZED_NAME_TRIP_IDS = "tripIds";
  @SerializedName(SERIALIZED_NAME_TRIP_IDS)
  @javax.annotation.Nullable
  private List<String> tripIds;

  public static final String SERIALIZED_NAME_HAS_ALERT_IN_PATTERN = "hasAlertInPattern";
  @SerializedName(SERIALIZED_NAME_HAS_ALERT_IN_PATTERN)
  @javax.annotation.Nullable
  private Boolean hasAlertInPattern;

  public static final String SERIALIZED_NAME_GENERALIZED_COST = "generalizedCost";
  @SerializedName(SERIALIZED_NAME_GENERALIZED_COST)
  @javax.annotation.Nullable
  private Integer generalizedCost;

  public static final String SERIALIZED_NAME_REQUIRES_BOOKING = "requiresBooking";
  @SerializedName(SERIALIZED_NAME_REQUIRES_BOOKING)
  @javax.annotation.Nullable
  private Boolean requiresBooking;

  public static final String SERIALIZED_NAME_ON_BOARD_ACCESS = "onBoardAccess";
  @SerializedName(SERIALIZED_NAME_ON_BOARD_ACCESS)
  @javax.annotation.Nullable
  private Boolean onBoardAccess = false;

  public static final String SERIALIZED_NAME_VERTEX = "vertex";
  @SerializedName(SERIALIZED_NAME_VERTEX)
  @javax.annotation.Nullable
  private String vertex;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Long duration;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  @javax.annotation.Nullable
  private LegTimeZone timeZone;

  public static final String SERIALIZED_NAME_TRANSIT_LEG = "transitLeg";
  @SerializedName(SERIALIZED_NAME_TRANSIT_LEG)
  @javax.annotation.Nullable
  private Boolean transitLeg;

  public static final String SERIALIZED_NAME_INTERMEDIATE_STOPS = "intermediateStops";
  @SerializedName(SERIALIZED_NAME_INTERMEDIATE_STOPS)
  @javax.annotation.Nullable
  private List<Place> intermediateStops;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  @javax.annotation.Nullable
  private List<WalkStep> steps;

  public Leg() {
  }

  public Leg startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * A láb kezdete ezredmásodpercben.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Leg endTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * A láb vége ezredmásodpercben.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Leg departureDelay(@javax.annotation.Nullable Integer departureDelay) {
    this.departureDelay = departureDelay;
    return this;
  }

  /**
   * Tranzit láb esetén a láb indulása és a tényleges felszállás közötti késleltetés.
   * @return departureDelay
   */
  @javax.annotation.Nullable
  public Integer getDepartureDelay() {
    return departureDelay;
  }

  public void setDepartureDelay(@javax.annotation.Nullable Integer departureDelay) {
    this.departureDelay = departureDelay;
  }


  public Leg arrivalDelay(@javax.annotation.Nullable Integer arrivalDelay) {
    this.arrivalDelay = arrivalDelay;
    return this;
  }

  /**
   * Tranzit láb esetén a láb vége és a tényleges leszállás közötti késleltetés.
   * @return arrivalDelay
   */
  @javax.annotation.Nullable
  public Integer getArrivalDelay() {
    return arrivalDelay;
  }

  public void setArrivalDelay(@javax.annotation.Nullable Integer arrivalDelay) {
    this.arrivalDelay = arrivalDelay;
  }


  public Leg realTime(@javax.annotation.Nullable Boolean realTime) {
    this.realTime = realTime;
    return this;
  }

  /**
   * Jelzi, hogy a láb adatai valós idejű forrásból származnak.
   * @return realTime
   */
  @javax.annotation.Nullable
  public Boolean getRealTime() {
    return realTime;
  }

  public void setRealTime(@javax.annotation.Nullable Boolean realTime) {
    this.realTime = realTime;
  }


  public Leg distance(@javax.annotation.Nullable Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * A láb bejárása alatt megtett táv méterben.
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(@javax.annotation.Nullable Double distance) {
    this.distance = distance;
  }


  public Leg pathway(@javax.annotation.Nullable Boolean pathway) {
    this.pathway = pathway;
    return this;
  }

  /**
   * Jelzi, hogy a láb egy pathway (pl. metró lejáró).
   * @return pathway
   */
  @javax.annotation.Nullable
  public Boolean getPathway() {
    return pathway;
  }

  public void setPathway(@javax.annotation.Nullable Boolean pathway) {
    this.pathway = pathway;
  }


  public Leg mode(@javax.annotation.Nullable String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * A lábon használt közlekedési mód.
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable String mode) {
    this.mode = mode;
  }


  public Leg agencyName(@javax.annotation.Nullable String agencyName) {
    this.agencyName = agencyName;
    return this;
  }

  /**
   * Tranzit láb esetén a járatot biztosító szolgáltató neve.
   * @return agencyName
   */
  @javax.annotation.Nullable
  public String getAgencyName() {
    return agencyName;
  }

  public void setAgencyName(@javax.annotation.Nullable String agencyName) {
    this.agencyName = agencyName;
  }


  public Leg agencyUrl(@javax.annotation.Nullable String agencyUrl) {
    this.agencyUrl = agencyUrl;
    return this;
  }

  /**
   * Tranzit láb esetén a járatot biztosító szolgáltató linkje.
   * @return agencyUrl
   */
  @javax.annotation.Nullable
  public String getAgencyUrl() {
    return agencyUrl;
  }

  public void setAgencyUrl(@javax.annotation.Nullable String agencyUrl) {
    this.agencyUrl = agencyUrl;
  }


  public Leg agencyTimeZoneOffset(@javax.annotation.Nullable Integer agencyTimeZoneOffset) {
    this.agencyTimeZoneOffset = agencyTimeZoneOffset;
    return this;
  }

  /**
   * Tranzit láb esetén a járatot biztosító szolgáltató időzónájának eltolódása.
   * @return agencyTimeZoneOffset
   */
  @javax.annotation.Nullable
  public Integer getAgencyTimeZoneOffset() {
    return agencyTimeZoneOffset;
  }

  public void setAgencyTimeZoneOffset(@javax.annotation.Nullable Integer agencyTimeZoneOffset) {
    this.agencyTimeZoneOffset = agencyTimeZoneOffset;
  }


  public Leg routeColor(@javax.annotation.Nullable String routeColor) {
    this.routeColor = routeColor;
    return this;
  }

  /**
   * Tranzit láb esetén a járat hátterének színe a megjelenítéséhez.
   * @return routeColor
   */
  @javax.annotation.Nullable
  public String getRouteColor() {
    return routeColor;
  }

  public void setRouteColor(@javax.annotation.Nullable String routeColor) {
    this.routeColor = routeColor;
  }


  public Leg routeId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * Tranzit láb esetén a járat azonosítója.
   * @return routeId
   */
  @javax.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(@javax.annotation.Nullable String routeId) {
    this.routeId = routeId;
  }


  public Leg routeTextColor(@javax.annotation.Nullable String routeTextColor) {
    this.routeTextColor = routeTextColor;
    return this;
  }

  /**
   * Tranzit láb esetén a járat szövegének színe a megjelenítéséhez.
   * @return routeTextColor
   */
  @javax.annotation.Nullable
  public String getRouteTextColor() {
    return routeTextColor;
  }

  public void setRouteTextColor(@javax.annotation.Nullable String routeTextColor) {
    this.routeTextColor = routeTextColor;
  }


  public Leg interlineWithPreviousLeg(@javax.annotation.Nullable Boolean interlineWithPreviousLeg) {
    this.interlineWithPreviousLeg = interlineWithPreviousLeg;
    return this;
  }

  /**
   * Jelzi, hogy az utas maradjon a járművön a végállomásnál, mert másik menetként folytatódik (hurokjárat).
   * @return interlineWithPreviousLeg
   */
  @javax.annotation.Nullable
  public Boolean getInterlineWithPreviousLeg() {
    return interlineWithPreviousLeg;
  }

  public void setInterlineWithPreviousLeg(@javax.annotation.Nullable Boolean interlineWithPreviousLeg) {
    this.interlineWithPreviousLeg = interlineWithPreviousLeg;
  }


  public Leg tripBlockId(@javax.annotation.Nullable String tripBlockId) {
    this.tripBlockId = tripBlockId;
    return this;
  }

  /**
   * Tranzit láb esetén a menethez tartozó GTFS block_id, amennyiben létezik.
   * @return tripBlockId
   */
  @javax.annotation.Nullable
  public String getTripBlockId() {
    return tripBlockId;
  }

  public void setTripBlockId(@javax.annotation.Nullable String tripBlockId) {
    this.tripBlockId = tripBlockId;
  }


  public Leg headsign(@javax.annotation.Nullable String headsign) {
    this.headsign = headsign;
    return this;
  }

  /**
   * Tranzit láb esetén a menet célállomása.
   * @return headsign
   */
  @javax.annotation.Nullable
  public String getHeadsign() {
    return headsign;
  }

  public void setHeadsign(@javax.annotation.Nullable String headsign) {
    this.headsign = headsign;
  }


  public Leg agencyId(@javax.annotation.Nullable String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * Tranzit láb esetén a járatot biztosító szolgáltató azonosítója.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(@javax.annotation.Nullable String agencyId) {
    this.agencyId = agencyId;
  }


  public Leg tripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
    return this;
  }

  /**
   * Tranzit láb esetén a menet azonosítója.
   * @return tripId
   */
  @javax.annotation.Nullable
  public String getTripId() {
    return tripId;
  }

  public void setTripId(@javax.annotation.Nullable String tripId) {
    this.tripId = tripId;
  }


  public Leg serviceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
    return this;
  }

  /**
   * Tranzit láb esetén a menet menetrendi napja.
   * @return serviceDate
   */
  @javax.annotation.Nullable
  public String getServiceDate() {
    return serviceDate;
  }

  public void setServiceDate(@javax.annotation.Nullable String serviceDate) {
    this.serviceDate = serviceDate;
  }


  public Leg from(@javax.annotation.Nullable Place from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public Place getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable Place from) {
    this.from = from;
  }


  public Leg to(@javax.annotation.Nullable Place to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public Place getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nullable Place to) {
    this.to = to;
  }


  public Leg legGeometry(@javax.annotation.Nullable EncodedPolylineBean legGeometry) {
    this.legGeometry = legGeometry;
    return this;
  }

  /**
   * Get legGeometry
   * @return legGeometry
   */
  @javax.annotation.Nullable
  public EncodedPolylineBean getLegGeometry() {
    return legGeometry;
  }

  public void setLegGeometry(@javax.annotation.Nullable EncodedPolylineBean legGeometry) {
    this.legGeometry = legGeometry;
  }


  public Leg legElevation(@javax.annotation.Nullable List<ElevationPoint> legElevation) {
    this.legElevation = legElevation;
    return this;
  }

  public Leg addLegElevationItem(ElevationPoint legElevationItem) {
    if (this.legElevation == null) {
      this.legElevation = new ArrayList<>();
    }
    this.legElevation.add(legElevationItem);
    return this;
  }

  /**
   * A lábhoz tartozó magassági adatok.
   * @return legElevation
   */
  @javax.annotation.Nullable
  public List<ElevationPoint> getLegElevation() {
    return legElevation;
  }

  public void setLegElevation(@javax.annotation.Nullable List<ElevationPoint> legElevation) {
    this.legElevation = legElevation;
  }


  public Leg alertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
    return this;
  }

  public Leg addAlertIdsItem(String alertIdsItem) {
    if (this.alertIds == null) {
      this.alertIds = new ArrayList<>();
    }
    this.alertIds.add(alertIdsItem);
    return this;
  }

  /**
   * A lábhoz tartozó aktív zavarok azonosítói.
   * @return alertIds
   */
  @javax.annotation.Nullable
  public List<String> getAlertIds() {
    return alertIds;
  }

  public void setAlertIds(@javax.annotation.Nullable List<String> alertIds) {
    this.alertIds = alertIds;
  }


  public Leg routeShortName(@javax.annotation.Nullable String routeShortName) {
    this.routeShortName = routeShortName;
    return this;
  }

  /**
   * Tranzit láb esetén a járat rövid neve.
   * @return routeShortName
   */
  @javax.annotation.Nullable
  public String getRouteShortName() {
    return routeShortName;
  }

  public void setRouteShortName(@javax.annotation.Nullable String routeShortName) {
    this.routeShortName = routeShortName;
  }


  public Leg routeLongName(@javax.annotation.Nullable String routeLongName) {
    this.routeLongName = routeLongName;
    return this;
  }

  /**
   * Tranzit láb esetén a járat hosszú neve.
   * @return routeLongName
   */
  @javax.annotation.Nullable
  public String getRouteLongName() {
    return routeLongName;
  }

  public void setRouteLongName(@javax.annotation.Nullable String routeLongName) {
    this.routeLongName = routeLongName;
  }


  public Leg boardRule(@javax.annotation.Nullable String boardRule) {
    this.boardRule = boardRule;
    return this;
  }

  /**
   * Igényvezérelt menet esetén a felszállási szabály.
   * @return boardRule
   */
  @javax.annotation.Nullable
  public String getBoardRule() {
    return boardRule;
  }

  public void setBoardRule(@javax.annotation.Nullable String boardRule) {
    this.boardRule = boardRule;
  }


  public Leg alightRule(@javax.annotation.Nullable String alightRule) {
    this.alightRule = alightRule;
    return this;
  }

  /**
   * Igényvezérelt menet esetén a leszállási szabály.
   * @return alightRule
   */
  @javax.annotation.Nullable
  public String getAlightRule() {
    return alightRule;
  }

  public void setAlightRule(@javax.annotation.Nullable String alightRule) {
    this.alightRule = alightRule;
  }


  public Leg rentedBike(@javax.annotation.Nullable Boolean rentedBike) {
    this.rentedBike = rentedBike;
    return this;
  }

  /**
   * Jelzi, hogy a lábat bérelt kerékpárral kell bejárni.
   * @return rentedBike
   */
  @javax.annotation.Nullable
  public Boolean getRentedBike() {
    return rentedBike;
  }

  public void setRentedBike(@javax.annotation.Nullable Boolean rentedBike) {
    this.rentedBike = rentedBike;
  }


  public Leg wait(@javax.annotation.Nullable WaitEnum wait) {
    this.wait = wait;
    return this;
  }

  /**
   * A várakozási idő mennyiségi típusa a tranzit típusú lábon.
   * @return wait
   */
  @javax.annotation.Nullable
  public WaitEnum getWait() {
    return wait;
  }

  public void setWait(@javax.annotation.Nullable WaitEnum wait) {
    this.wait = wait;
  }


  public Leg routeIds(@javax.annotation.Nullable List<String> routeIds) {
    this.routeIds = routeIds;
    return this;
  }

  public Leg addRouteIdsItem(String routeIdsItem) {
    if (this.routeIds == null) {
      this.routeIds = new ArrayList<>();
    }
    this.routeIds.add(routeIdsItem);
    return this;
  }

  /**
   * Útiterv minták esetén, a lábnak a mintában megfelelő, más lábakon használt járatok azonosítóinak listája.
   * @return routeIds
   */
  @javax.annotation.Nullable
  public List<String> getRouteIds() {
    return routeIds;
  }

  public void setRouteIds(@javax.annotation.Nullable List<String> routeIds) {
    this.routeIds = routeIds;
  }


  public Leg tripIds(@javax.annotation.Nullable List<String> tripIds) {
    this.tripIds = tripIds;
    return this;
  }

  public Leg addTripIdsItem(String tripIdsItem) {
    if (this.tripIds == null) {
      this.tripIds = new ArrayList<>();
    }
    this.tripIds.add(tripIdsItem);
    return this;
  }

  /**
   * Útiterv minták esetén, a lábnak a mintában megfelelő, más lábakon használt menetek azonosítóinak listája.
   * @return tripIds
   */
  @javax.annotation.Nullable
  public List<String> getTripIds() {
    return tripIds;
  }

  public void setTripIds(@javax.annotation.Nullable List<String> tripIds) {
    this.tripIds = tripIds;
  }


  public Leg hasAlertInPattern(@javax.annotation.Nullable Boolean hasAlertInPattern) {
    this.hasAlertInPattern = hasAlertInPattern;
    return this;
  }

  /**
   * Útiterv minták esetén jelzi, hogy a mintában a megfelelő lábak valamelyikén szerepel aktív riasztás. Nincs kitöltve, ha az útiterv minták ki vannak kapcsolva.
   * @return hasAlertInPattern
   */
  @javax.annotation.Nullable
  public Boolean getHasAlertInPattern() {
    return hasAlertInPattern;
  }

  public void setHasAlertInPattern(@javax.annotation.Nullable Boolean hasAlertInPattern) {
    this.hasAlertInPattern = hasAlertInPattern;
  }


  public Leg generalizedCost(@javax.annotation.Nullable Integer generalizedCost) {
    this.generalizedCost = generalizedCost;
    return this;
  }

  /**
   * Az utazástervező algoritmus által használt súly.
   * @return generalizedCost
   */
  @javax.annotation.Nullable
  public Integer getGeneralizedCost() {
    return generalizedCost;
  }

  public void setGeneralizedCost(@javax.annotation.Nullable Integer generalizedCost) {
    this.generalizedCost = generalizedCost;
  }


  public Leg requiresBooking(@javax.annotation.Nullable Boolean requiresBooking) {
    this.requiresBooking = requiresBooking;
    return this;
  }

  /**
   * Igaz, ha szükséges foglalás.
   * @return requiresBooking
   */
  @javax.annotation.Nullable
  public Boolean getRequiresBooking() {
    return requiresBooking;
  }

  public void setRequiresBooking(@javax.annotation.Nullable Boolean requiresBooking) {
    this.requiresBooking = requiresBooking;
  }


  public Leg onBoardAccess(@javax.annotation.Nullable Boolean onBoardAccess) {
    this.onBoardAccess = onBoardAccess;
    return this;
  }

  /**
   * Igaz, ha járatról történt a tervezés.
   * @return onBoardAccess
   */
  @javax.annotation.Nullable
  public Boolean getOnBoardAccess() {
    return onBoardAccess;
  }

  public void setOnBoardAccess(@javax.annotation.Nullable Boolean onBoardAccess) {
    this.onBoardAccess = onBoardAccess;
  }


  public Leg vertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
    return this;
  }

  /**
   * A menet utazástervező azonosítója, amelyet a &#x60;fromPlace&#x60; megadásához lehet használni.
   * @return vertex
   */
  @javax.annotation.Nullable
  public String getVertex() {
    return vertex;
  }

  public void setVertex(@javax.annotation.Nullable String vertex) {
    this.vertex = vertex;
  }


  public Leg duration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
  }


  public Leg timeZone(@javax.annotation.Nullable LegTimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public LegTimeZone getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(@javax.annotation.Nullable LegTimeZone timeZone) {
    this.timeZone = timeZone;
  }


  public Leg transitLeg(@javax.annotation.Nullable Boolean transitLeg) {
    this.transitLeg = transitLeg;
    return this;
  }

  /**
   * Get transitLeg
   * @return transitLeg
   */
  @javax.annotation.Nullable
  public Boolean getTransitLeg() {
    return transitLeg;
  }

  public void setTransitLeg(@javax.annotation.Nullable Boolean transitLeg) {
    this.transitLeg = transitLeg;
  }


  public Leg intermediateStops(@javax.annotation.Nullable List<Place> intermediateStops) {
    this.intermediateStops = intermediateStops;
    return this;
  }

  public Leg addIntermediateStopsItem(Place intermediateStopsItem) {
    if (this.intermediateStops == null) {
      this.intermediateStops = new ArrayList<>();
    }
    this.intermediateStops.add(intermediateStopsItem);
    return this;
  }

  /**
   * Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
   * @return intermediateStops
   */
  @javax.annotation.Nullable
  public List<Place> getIntermediateStops() {
    return intermediateStops;
  }

  public void setIntermediateStops(@javax.annotation.Nullable List<Place> intermediateStops) {
    this.intermediateStops = intermediateStops;
  }


  public Leg steps(@javax.annotation.Nullable List<WalkStep> steps) {
    this.steps = steps;
    return this;
  }

  public Leg addStepsItem(WalkStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

  /**
   * Az útvonal lépései gyalogos, kerékpáros vagy autós láb lesetén.
   * @return steps
   */
  @javax.annotation.Nullable
  public List<WalkStep> getSteps() {
    return steps;
  }

  public void setSteps(@javax.annotation.Nullable List<WalkStep> steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Leg leg = (Leg) o;
    return Objects.equals(this.startTime, leg.startTime) &&
        Objects.equals(this.endTime, leg.endTime) &&
        Objects.equals(this.departureDelay, leg.departureDelay) &&
        Objects.equals(this.arrivalDelay, leg.arrivalDelay) &&
        Objects.equals(this.realTime, leg.realTime) &&
        Objects.equals(this.distance, leg.distance) &&
        Objects.equals(this.pathway, leg.pathway) &&
        Objects.equals(this.mode, leg.mode) &&
        Objects.equals(this.agencyName, leg.agencyName) &&
        Objects.equals(this.agencyUrl, leg.agencyUrl) &&
        Objects.equals(this.agencyTimeZoneOffset, leg.agencyTimeZoneOffset) &&
        Objects.equals(this.routeColor, leg.routeColor) &&
        Objects.equals(this.routeId, leg.routeId) &&
        Objects.equals(this.routeTextColor, leg.routeTextColor) &&
        Objects.equals(this.interlineWithPreviousLeg, leg.interlineWithPreviousLeg) &&
        Objects.equals(this.tripBlockId, leg.tripBlockId) &&
        Objects.equals(this.headsign, leg.headsign) &&
        Objects.equals(this.agencyId, leg.agencyId) &&
        Objects.equals(this.tripId, leg.tripId) &&
        Objects.equals(this.serviceDate, leg.serviceDate) &&
        Objects.equals(this.from, leg.from) &&
        Objects.equals(this.to, leg.to) &&
        Objects.equals(this.legGeometry, leg.legGeometry) &&
        Objects.equals(this.legElevation, leg.legElevation) &&
        Objects.equals(this.alertIds, leg.alertIds) &&
        Objects.equals(this.routeShortName, leg.routeShortName) &&
        Objects.equals(this.routeLongName, leg.routeLongName) &&
        Objects.equals(this.boardRule, leg.boardRule) &&
        Objects.equals(this.alightRule, leg.alightRule) &&
        Objects.equals(this.rentedBike, leg.rentedBike) &&
        Objects.equals(this.wait, leg.wait) &&
        Objects.equals(this.routeIds, leg.routeIds) &&
        Objects.equals(this.tripIds, leg.tripIds) &&
        Objects.equals(this.hasAlertInPattern, leg.hasAlertInPattern) &&
        Objects.equals(this.generalizedCost, leg.generalizedCost) &&
        Objects.equals(this.requiresBooking, leg.requiresBooking) &&
        Objects.equals(this.onBoardAccess, leg.onBoardAccess) &&
        Objects.equals(this.vertex, leg.vertex) &&
        Objects.equals(this.duration, leg.duration) &&
        Objects.equals(this.timeZone, leg.timeZone) &&
        Objects.equals(this.transitLeg, leg.transitLeg) &&
        Objects.equals(this.intermediateStops, leg.intermediateStops) &&
        Objects.equals(this.steps, leg.steps);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, endTime, departureDelay, arrivalDelay, realTime, distance, pathway, mode, agencyName, agencyUrl, agencyTimeZoneOffset, routeColor, routeId, routeTextColor, interlineWithPreviousLeg, tripBlockId, headsign, agencyId, tripId, serviceDate, from, to, legGeometry, legElevation, alertIds, routeShortName, routeLongName, boardRule, alightRule, rentedBike, wait, routeIds, tripIds, hasAlertInPattern, generalizedCost, requiresBooking, onBoardAccess, vertex, duration, timeZone, transitLeg, intermediateStops, steps);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Leg {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    departureDelay: ").append(toIndentedString(departureDelay)).append("\n");
    sb.append("    arrivalDelay: ").append(toIndentedString(arrivalDelay)).append("\n");
    sb.append("    realTime: ").append(toIndentedString(realTime)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    pathway: ").append(toIndentedString(pathway)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    agencyName: ").append(toIndentedString(agencyName)).append("\n");
    sb.append("    agencyUrl: ").append(toIndentedString(agencyUrl)).append("\n");
    sb.append("    agencyTimeZoneOffset: ").append(toIndentedString(agencyTimeZoneOffset)).append("\n");
    sb.append("    routeColor: ").append(toIndentedString(routeColor)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    routeTextColor: ").append(toIndentedString(routeTextColor)).append("\n");
    sb.append("    interlineWithPreviousLeg: ").append(toIndentedString(interlineWithPreviousLeg)).append("\n");
    sb.append("    tripBlockId: ").append(toIndentedString(tripBlockId)).append("\n");
    sb.append("    headsign: ").append(toIndentedString(headsign)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("    serviceDate: ").append(toIndentedString(serviceDate)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    legGeometry: ").append(toIndentedString(legGeometry)).append("\n");
    sb.append("    legElevation: ").append(toIndentedString(legElevation)).append("\n");
    sb.append("    alertIds: ").append(toIndentedString(alertIds)).append("\n");
    sb.append("    routeShortName: ").append(toIndentedString(routeShortName)).append("\n");
    sb.append("    routeLongName: ").append(toIndentedString(routeLongName)).append("\n");
    sb.append("    boardRule: ").append(toIndentedString(boardRule)).append("\n");
    sb.append("    alightRule: ").append(toIndentedString(alightRule)).append("\n");
    sb.append("    rentedBike: ").append(toIndentedString(rentedBike)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("    routeIds: ").append(toIndentedString(routeIds)).append("\n");
    sb.append("    tripIds: ").append(toIndentedString(tripIds)).append("\n");
    sb.append("    hasAlertInPattern: ").append(toIndentedString(hasAlertInPattern)).append("\n");
    sb.append("    generalizedCost: ").append(toIndentedString(generalizedCost)).append("\n");
    sb.append("    requiresBooking: ").append(toIndentedString(requiresBooking)).append("\n");
    sb.append("    onBoardAccess: ").append(toIndentedString(onBoardAccess)).append("\n");
    sb.append("    vertex: ").append(toIndentedString(vertex)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    transitLeg: ").append(toIndentedString(transitLeg)).append("\n");
    sb.append("    intermediateStops: ").append(toIndentedString(intermediateStops)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("departureDelay");
    openapiFields.add("arrivalDelay");
    openapiFields.add("realTime");
    openapiFields.add("distance");
    openapiFields.add("pathway");
    openapiFields.add("mode");
    openapiFields.add("agencyName");
    openapiFields.add("agencyUrl");
    openapiFields.add("agencyTimeZoneOffset");
    openapiFields.add("routeColor");
    openapiFields.add("routeId");
    openapiFields.add("routeTextColor");
    openapiFields.add("interlineWithPreviousLeg");
    openapiFields.add("tripBlockId");
    openapiFields.add("headsign");
    openapiFields.add("agencyId");
    openapiFields.add("tripId");
    openapiFields.add("serviceDate");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("legGeometry");
    openapiFields.add("legElevation");
    openapiFields.add("alertIds");
    openapiFields.add("routeShortName");
    openapiFields.add("routeLongName");
    openapiFields.add("boardRule");
    openapiFields.add("alightRule");
    openapiFields.add("rentedBike");
    openapiFields.add("wait");
    openapiFields.add("routeIds");
    openapiFields.add("tripIds");
    openapiFields.add("hasAlertInPattern");
    openapiFields.add("generalizedCost");
    openapiFields.add("requiresBooking");
    openapiFields.add("onBoardAccess");
    openapiFields.add("vertex");
    openapiFields.add("duration");
    openapiFields.add("timeZone");
    openapiFields.add("transitLeg");
    openapiFields.add("intermediateStops");
    openapiFields.add("steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Leg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Leg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Leg is not found in the empty JSON string", Leg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Leg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Leg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("agencyName") != null && !jsonObj.get("agencyName").isJsonNull()) && !jsonObj.get("agencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyName").toString()));
      }
      if ((jsonObj.get("agencyUrl") != null && !jsonObj.get("agencyUrl").isJsonNull()) && !jsonObj.get("agencyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyUrl").toString()));
      }
      if ((jsonObj.get("routeColor") != null && !jsonObj.get("routeColor").isJsonNull()) && !jsonObj.get("routeColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeColor").toString()));
      }
      if ((jsonObj.get("routeId") != null && !jsonObj.get("routeId").isJsonNull()) && !jsonObj.get("routeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeId").toString()));
      }
      if ((jsonObj.get("routeTextColor") != null && !jsonObj.get("routeTextColor").isJsonNull()) && !jsonObj.get("routeTextColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeTextColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeTextColor").toString()));
      }
      if ((jsonObj.get("tripBlockId") != null && !jsonObj.get("tripBlockId").isJsonNull()) && !jsonObj.get("tripBlockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripBlockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripBlockId").toString()));
      }
      if ((jsonObj.get("headsign") != null && !jsonObj.get("headsign").isJsonNull()) && !jsonObj.get("headsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headsign").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if ((jsonObj.get("tripId") != null && !jsonObj.get("tripId").isJsonNull()) && !jsonObj.get("tripId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripId").toString()));
      }
      if ((jsonObj.get("serviceDate") != null && !jsonObj.get("serviceDate").isJsonNull()) && !jsonObj.get("serviceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDate").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        Place.validateJsonElement(jsonObj.get("from"));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        Place.validateJsonElement(jsonObj.get("to"));
      }
      // validate the optional field `legGeometry`
      if (jsonObj.get("legGeometry") != null && !jsonObj.get("legGeometry").isJsonNull()) {
        EncodedPolylineBean.validateJsonElement(jsonObj.get("legGeometry"));
      }
      if (jsonObj.get("legElevation") != null && !jsonObj.get("legElevation").isJsonNull()) {
        JsonArray jsonArraylegElevation = jsonObj.getAsJsonArray("legElevation");
        if (jsonArraylegElevation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legElevation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legElevation` to be an array in the JSON string but got `%s`", jsonObj.get("legElevation").toString()));
          }

          // validate the optional field `legElevation` (array)
          for (int i = 0; i < jsonArraylegElevation.size(); i++) {
            ElevationPoint.validateJsonElement(jsonArraylegElevation.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertIds") != null && !jsonObj.get("alertIds").isJsonNull() && !jsonObj.get("alertIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertIds` to be an array in the JSON string but got `%s`", jsonObj.get("alertIds").toString()));
      }
      if ((jsonObj.get("routeShortName") != null && !jsonObj.get("routeShortName").isJsonNull()) && !jsonObj.get("routeShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeShortName").toString()));
      }
      if ((jsonObj.get("routeLongName") != null && !jsonObj.get("routeLongName").isJsonNull()) && !jsonObj.get("routeLongName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeLongName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeLongName").toString()));
      }
      if ((jsonObj.get("boardRule") != null && !jsonObj.get("boardRule").isJsonNull()) && !jsonObj.get("boardRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardRule").toString()));
      }
      if ((jsonObj.get("alightRule") != null && !jsonObj.get("alightRule").isJsonNull()) && !jsonObj.get("alightRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alightRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alightRule").toString()));
      }
      if ((jsonObj.get("wait") != null && !jsonObj.get("wait").isJsonNull()) && !jsonObj.get("wait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait").toString()));
      }
      // validate the optional field `wait`
      if (jsonObj.get("wait") != null && !jsonObj.get("wait").isJsonNull()) {
        WaitEnum.validateJsonElement(jsonObj.get("wait"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("routeIds") != null && !jsonObj.get("routeIds").isJsonNull() && !jsonObj.get("routeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeIds` to be an array in the JSON string but got `%s`", jsonObj.get("routeIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tripIds") != null && !jsonObj.get("tripIds").isJsonNull() && !jsonObj.get("tripIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripIds` to be an array in the JSON string but got `%s`", jsonObj.get("tripIds").toString()));
      }
      if ((jsonObj.get("vertex") != null && !jsonObj.get("vertex").isJsonNull()) && !jsonObj.get("vertex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertex").toString()));
      }
      // validate the optional field `timeZone`
      if (jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) {
        LegTimeZone.validateJsonElement(jsonObj.get("timeZone"));
      }
      if (jsonObj.get("intermediateStops") != null && !jsonObj.get("intermediateStops").isJsonNull()) {
        JsonArray jsonArrayintermediateStops = jsonObj.getAsJsonArray("intermediateStops");
        if (jsonArrayintermediateStops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intermediateStops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intermediateStops` to be an array in the JSON string but got `%s`", jsonObj.get("intermediateStops").toString()));
          }

          // validate the optional field `intermediateStops` (array)
          for (int i = 0; i < jsonArrayintermediateStops.size(); i++) {
            Place.validateJsonElement(jsonArrayintermediateStops.get(i));
          };
        }
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            WalkStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Leg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Leg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Leg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Leg.class));

       return (TypeAdapter<T>) new TypeAdapter<Leg>() {
           @Override
           public void write(JsonWriter out, Leg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Leg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Leg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Leg
   * @throws IOException if the JSON string is invalid with respect to Leg
   */
  public static Leg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Leg.class);
  }

  /**
   * Convert an instance of Leg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

