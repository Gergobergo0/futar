/*
 * realCity Query Server API
 * Specification for the realCity Query Server API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransitRouteStyle;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Járatok referenciáinak listája.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T15:47:41.658152+02:00[Europe/Budapest]", comments = "Generator version: 7.12.0")
public class TransitRoute {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  @javax.annotation.Nullable
  private String shortName;

  public static final String SERIALIZED_NAME_LONG_NAME = "longName";
  @SerializedName(SERIALIZED_NAME_LONG_NAME)
  @javax.annotation.Nullable
  private String longName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  /**
   * A járat típusa.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    WALK("WALK"),
    
    BICYCLE("BICYCLE"),
    
    CAR("CAR"),
    
    TRAM("TRAM"),
    
    SUBWAY("SUBWAY"),
    
    SUBURBAN_RAILWAY("SUBURBAN_RAILWAY"),
    
    RAIL("RAIL"),
    
    COACH("COACH"),
    
    BUS("BUS"),
    
    TROLLEYBUS("TROLLEYBUS"),
    
    FERRY("FERRY"),
    
    CABLE_CAR("CABLE_CAR"),
    
    GONDOLA("GONDOLA"),
    
    FUNICULAR("FUNICULAR"),
    
    TRANSIT("TRANSIT"),
    
    TRAINISH("TRAINISH"),
    
    BUSISH("BUSISH"),
    
    LEG_SWITCH("LEG_SWITCH"),
    
    CUSTOM_MOTOR_VEHICLE("CUSTOM_MOTOR_VEHICLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COLOR)
  @javax.annotation.Nullable
  private String color;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "textColor";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  @javax.annotation.Nullable
  private String textColor;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  @javax.annotation.Nullable
  private String agencyId;

  public static final String SERIALIZED_NAME_ICON_DISPLAY_TYPE = "iconDisplayType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ICON_DISPLAY_TYPE)
  @javax.annotation.Nullable
  private String iconDisplayType;

  public static final String SERIALIZED_NAME_ICON_DISPLAY_TEXT = "iconDisplayText";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ICON_DISPLAY_TEXT)
  @javax.annotation.Nullable
  private String iconDisplayText;

  public static final String SERIALIZED_NAME_BIKES_ALLOWED = "bikesAllowed";
  @SerializedName(SERIALIZED_NAME_BIKES_ALLOWED)
  @javax.annotation.Nullable
  private Boolean bikesAllowed;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  @javax.annotation.Nullable
  private TransitRouteStyle style;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  @javax.annotation.Nullable
  private Integer sortOrder;

  public TransitRoute() {
  }

  public TransitRoute id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * A járat azonosítója.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TransitRoute shortName(@javax.annotation.Nullable String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * A járat rövid neve.
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(@javax.annotation.Nullable String shortName) {
    this.shortName = shortName;
  }


  public TransitRoute longName(@javax.annotation.Nullable String longName) {
    this.longName = longName;
    return this;
  }

  /**
   * A járat hosszú neve.
   * @return longName
   */
  @javax.annotation.Nullable
  public String getLongName() {
    return longName;
  }

  public void setLongName(@javax.annotation.Nullable String longName) {
    this.longName = longName;
  }


  public TransitRoute description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A járat neve. Ha egy | szerepel a névben, akkor a végállomásokat választja el amelyek külön sorokban megjeleníthetőek. COMPACT referenciák kérése esetében nincs kitöltve.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TransitRoute type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A járat típusa.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public TransitRoute url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * A járat linkje.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  @Deprecated
  public TransitRoute color(@javax.annotation.Nullable String color) {
    this.color = color;
    return this;
  }

  /**
   * A járat színe. Deprecated: használjuk a &#x60;style&#x60; attribútumot helyette.
   * @return color
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  @Deprecated
  public void setColor(@javax.annotation.Nullable String color) {
    this.color = color;
  }


  @Deprecated
  public TransitRoute textColor(@javax.annotation.Nullable String textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * A járat szövegének színe. Deprecated: használjuk a &#x60;style&#x60; attribútumot helyette.
   * @return textColor
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTextColor() {
    return textColor;
  }

  @Deprecated
  public void setTextColor(@javax.annotation.Nullable String textColor) {
    this.textColor = textColor;
  }


  public TransitRoute agencyId(@javax.annotation.Nullable String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * A járatot üzemeltető szolgáltató azonosítója.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(@javax.annotation.Nullable String agencyId) {
    this.agencyId = agencyId;
  }


  @Deprecated
  public TransitRoute iconDisplayType(@javax.annotation.Nullable String iconDisplayType) {
    this.iconDisplayType = iconDisplayType;
    return this;
  }

  /**
   * A járat ikonjának megjelenítési típusa. Deprecated: használjuk a &#x60;style&#x60; attribútumot helyette.
   * @return iconDisplayType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getIconDisplayType() {
    return iconDisplayType;
  }

  @Deprecated
  public void setIconDisplayType(@javax.annotation.Nullable String iconDisplayType) {
    this.iconDisplayType = iconDisplayType;
  }


  @Deprecated
  public TransitRoute iconDisplayText(@javax.annotation.Nullable String iconDisplayText) {
    this.iconDisplayText = iconDisplayText;
    return this;
  }

  /**
   * A járat ikonjának megjelenítési szövege. Deprecated: használjuk a &#x60;style&#x60; attribútumot helyette.
   * @return iconDisplayText
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getIconDisplayText() {
    return iconDisplayText;
  }

  @Deprecated
  public void setIconDisplayText(@javax.annotation.Nullable String iconDisplayText) {
    this.iconDisplayText = iconDisplayText;
  }


  public TransitRoute bikesAllowed(@javax.annotation.Nullable Boolean bikesAllowed) {
    this.bikesAllowed = bikesAllowed;
    return this;
  }

  /**
   * Kerékpár szállítása engedélyezett-e a járaton.
   * @return bikesAllowed
   */
  @javax.annotation.Nullable
  public Boolean getBikesAllowed() {
    return bikesAllowed;
  }

  public void setBikesAllowed(@javax.annotation.Nullable Boolean bikesAllowed) {
    this.bikesAllowed = bikesAllowed;
  }


  public TransitRoute style(@javax.annotation.Nullable TransitRouteStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public TransitRouteStyle getStyle() {
    return style;
  }

  public void setStyle(@javax.annotation.Nullable TransitRouteStyle style) {
    this.style = style;
  }


  public TransitRoute sortOrder(@javax.annotation.Nullable Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * A járat rendezési sorszáma a többi járathoz viszonyítva.
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(@javax.annotation.Nullable Integer sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitRoute transitRoute = (TransitRoute) o;
    return Objects.equals(this.id, transitRoute.id) &&
        Objects.equals(this.shortName, transitRoute.shortName) &&
        Objects.equals(this.longName, transitRoute.longName) &&
        Objects.equals(this.description, transitRoute.description) &&
        Objects.equals(this.type, transitRoute.type) &&
        Objects.equals(this.url, transitRoute.url) &&
        Objects.equals(this.color, transitRoute.color) &&
        Objects.equals(this.textColor, transitRoute.textColor) &&
        Objects.equals(this.agencyId, transitRoute.agencyId) &&
        Objects.equals(this.iconDisplayType, transitRoute.iconDisplayType) &&
        Objects.equals(this.iconDisplayText, transitRoute.iconDisplayText) &&
        Objects.equals(this.bikesAllowed, transitRoute.bikesAllowed) &&
        Objects.equals(this.style, transitRoute.style) &&
        Objects.equals(this.sortOrder, transitRoute.sortOrder);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, shortName, longName, description, type, url, color, textColor, agencyId, iconDisplayType, iconDisplayText, bikesAllowed, style, sortOrder);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitRoute {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    longName: ").append(toIndentedString(longName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    iconDisplayType: ").append(toIndentedString(iconDisplayType)).append("\n");
    sb.append("    iconDisplayText: ").append(toIndentedString(iconDisplayText)).append("\n");
    sb.append("    bikesAllowed: ").append(toIndentedString(bikesAllowed)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("shortName");
    openapiFields.add("longName");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("color");
    openapiFields.add("textColor");
    openapiFields.add("agencyId");
    openapiFields.add("iconDisplayType");
    openapiFields.add("iconDisplayText");
    openapiFields.add("bikesAllowed");
    openapiFields.add("style");
    openapiFields.add("sortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    /*
      if (jsonElement == null) {
        if (!TransitRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitRoute is not found in the empty JSON string", TransitRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
      if ((jsonObj.get("longName") != null && !jsonObj.get("longName").isJsonNull()) && !jsonObj.get("longName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("textColor") != null && !jsonObj.get("textColor").isJsonNull()) && !jsonObj.get("textColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textColor").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if ((jsonObj.get("iconDisplayType") != null && !jsonObj.get("iconDisplayType").isJsonNull()) && !jsonObj.get("iconDisplayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconDisplayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconDisplayType").toString()));
      }
      if ((jsonObj.get("iconDisplayText") != null && !jsonObj.get("iconDisplayText").isJsonNull()) && !jsonObj.get("iconDisplayText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconDisplayText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconDisplayText").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        TransitRouteStyle.validateJsonElement(jsonObj.get("style"));
      }*/
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitRoute>() {
           @Override
           public void write(JsonWriter out, TransitRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitRoute
   * @throws IOException if the JSON string is invalid with respect to TransitRoute
   */
  public static TransitRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitRoute.class);
  }

  /**
   * Convert an instance of TransitRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

